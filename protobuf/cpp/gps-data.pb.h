// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gps-data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gps_2ddata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gps_2ddata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gps_2ddata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gps_2ddata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gps_2ddata_2eproto;
namespace vutura {
namespace gps {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class GPSFix;
class GPSFixDefaultTypeInternal;
extern GPSFixDefaultTypeInternal _GPSFix_default_instance_;
class GPSFix_Uncertainties;
class GPSFix_UncertaintiesDefaultTypeInternal;
extern GPSFix_UncertaintiesDefaultTypeInternal _GPSFix_Uncertainties_default_instance_;
}  // namespace gps
}  // namespace vutura
PROTOBUF_NAMESPACE_OPEN
template<> ::vutura::gps::Empty* Arena::CreateMaybeMessage<::vutura::gps::Empty>(Arena*);
template<> ::vutura::gps::GPSFix* Arena::CreateMaybeMessage<::vutura::gps::GPSFix>(Arena*);
template<> ::vutura::gps::GPSFix_Uncertainties* Arena::CreateMaybeMessage<::vutura::gps::GPSFix_Uncertainties>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vutura {
namespace gps {

enum GPSFix_Status : int {
  GPSFix_Status_notSeen = 0,
  GPSFix_Status_noFix = 1,
  GPSFix_Status_fix2D = 3,
  GPSFix_Status_fix3D = 4,
  GPSFix_Status_GPSFix_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GPSFix_Status_GPSFix_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GPSFix_Status_IsValid(int value);
constexpr GPSFix_Status GPSFix_Status_Status_MIN = GPSFix_Status_notSeen;
constexpr GPSFix_Status GPSFix_Status_Status_MAX = GPSFix_Status_fix3D;
constexpr int GPSFix_Status_Status_ARRAYSIZE = GPSFix_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GPSFix_Status_descriptor();
template<typename T>
inline const std::string& GPSFix_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GPSFix_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GPSFix_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GPSFix_Status_descriptor(), enum_t_value);
}
inline bool GPSFix_Status_Parse(
    const std::string& name, GPSFix_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GPSFix_Status>(
    GPSFix_Status_descriptor(), name, value);
}
// ===================================================================

class Empty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vutura.gps.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vutura.gps.Empty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gps_2ddata_2eproto);
    return ::descriptor_table_gps_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:vutura.gps.Empty)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gps_2ddata_2eproto;
};
// -------------------------------------------------------------------

class GPSFix_Uncertainties :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vutura.gps.GPSFix.Uncertainties) */ {
 public:
  GPSFix_Uncertainties();
  virtual ~GPSFix_Uncertainties();

  GPSFix_Uncertainties(const GPSFix_Uncertainties& from);
  GPSFix_Uncertainties(GPSFix_Uncertainties&& from) noexcept
    : GPSFix_Uncertainties() {
    *this = ::std::move(from);
  }

  inline GPSFix_Uncertainties& operator=(const GPSFix_Uncertainties& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPSFix_Uncertainties& operator=(GPSFix_Uncertainties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPSFix_Uncertainties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPSFix_Uncertainties* internal_default_instance() {
    return reinterpret_cast<const GPSFix_Uncertainties*>(
               &_GPSFix_Uncertainties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GPSFix_Uncertainties* other);
  friend void swap(GPSFix_Uncertainties& a, GPSFix_Uncertainties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GPSFix_Uncertainties* New() const final {
    return CreateMaybeMessage<GPSFix_Uncertainties>(nullptr);
  }

  GPSFix_Uncertainties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPSFix_Uncertainties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPSFix_Uncertainties& from);
  void MergeFrom(const GPSFix_Uncertainties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPSFix_Uncertainties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vutura.gps.GPSFix.Uncertainties";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gps_2ddata_2eproto);
    return ::descriptor_table_gps_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .vutura.gps.GPSFix.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::vutura::gps::GPSFix_Status status() const;
  void set_status(::vutura::gps::GPSFix_Status value);

  // float latitude = 3;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  float latitude() const;
  void set_latitude(float value);

  // float longitude = 4;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  float longitude() const;
  void set_longitude(float value);

  // float altitude = 5;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 5;
  float altitude() const;
  void set_altitude(float value);

  // float track = 6;
  void clear_track();
  static const int kTrackFieldNumber = 6;
  float track() const;
  void set_track(float value);

  // float speed = 7;
  void clear_speed();
  static const int kSpeedFieldNumber = 7;
  float speed() const;
  void set_speed(float value);

  // float climb = 8;
  void clear_climb();
  static const int kClimbFieldNumber = 8;
  float climb() const;
  void set_climb(float value);

  // @@protoc_insertion_point(class_scope:vutura.gps.GPSFix.Uncertainties)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  int status_;
  float latitude_;
  float longitude_;
  float altitude_;
  float track_;
  float speed_;
  float climb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gps_2ddata_2eproto;
};
// -------------------------------------------------------------------

class GPSFix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vutura.gps.GPSFix) */ {
 public:
  GPSFix();
  virtual ~GPSFix();

  GPSFix(const GPSFix& from);
  GPSFix(GPSFix&& from) noexcept
    : GPSFix() {
    *this = ::std::move(from);
  }

  inline GPSFix& operator=(const GPSFix& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPSFix& operator=(GPSFix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPSFix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPSFix* internal_default_instance() {
    return reinterpret_cast<const GPSFix*>(
               &_GPSFix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GPSFix* other);
  friend void swap(GPSFix& a, GPSFix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GPSFix* New() const final {
    return CreateMaybeMessage<GPSFix>(nullptr);
  }

  GPSFix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPSFix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPSFix& from);
  void MergeFrom(const GPSFix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPSFix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vutura.gps.GPSFix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gps_2ddata_2eproto);
    return ::descriptor_table_gps_2ddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GPSFix_Uncertainties Uncertainties;

  typedef GPSFix_Status Status;
  static constexpr Status notSeen =
    GPSFix_Status_notSeen;
  static constexpr Status noFix =
    GPSFix_Status_noFix;
  static constexpr Status fix2D =
    GPSFix_Status_fix2D;
  static constexpr Status fix3D =
    GPSFix_Status_fix3D;
  static inline bool Status_IsValid(int value) {
    return GPSFix_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    GPSFix_Status_Status_MIN;
  static constexpr Status Status_MAX =
    GPSFix_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    GPSFix_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return GPSFix_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return GPSFix_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return GPSFix_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .vutura.gps.GPSFix.Uncertainties uncertainties = 9;
  bool has_uncertainties() const;
  void clear_uncertainties();
  static const int kUncertaintiesFieldNumber = 9;
  const ::vutura::gps::GPSFix_Uncertainties& uncertainties() const;
  ::vutura::gps::GPSFix_Uncertainties* release_uncertainties();
  ::vutura::gps::GPSFix_Uncertainties* mutable_uncertainties();
  void set_allocated_uncertainties(::vutura::gps::GPSFix_Uncertainties* uncertainties);

  // uint64 time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .vutura.gps.GPSFix.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::vutura::gps::GPSFix_Status status() const;
  void set_status(::vutura::gps::GPSFix_Status value);

  // float latitude = 3;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  float latitude() const;
  void set_latitude(float value);

  // float longitude = 4;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  float longitude() const;
  void set_longitude(float value);

  // float altitude = 5;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 5;
  float altitude() const;
  void set_altitude(float value);

  // float track = 6;
  void clear_track();
  static const int kTrackFieldNumber = 6;
  float track() const;
  void set_track(float value);

  // float speed = 7;
  void clear_speed();
  static const int kSpeedFieldNumber = 7;
  float speed() const;
  void set_speed(float value);

  // float climb = 8;
  void clear_climb();
  static const int kClimbFieldNumber = 8;
  float climb() const;
  void set_climb(float value);

  // @@protoc_insertion_point(class_scope:vutura.gps.GPSFix)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::vutura::gps::GPSFix_Uncertainties* uncertainties_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  int status_;
  float latitude_;
  float longitude_;
  float altitude_;
  float track_;
  float speed_;
  float climb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gps_2ddata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// GPSFix_Uncertainties

// uint64 time = 1;
inline void GPSFix_Uncertainties::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GPSFix_Uncertainties::time() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.Uncertainties.time)
  return time_;
}
inline void GPSFix_Uncertainties::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.Uncertainties.time)
}

// .vutura.gps.GPSFix.Status status = 2;
inline void GPSFix_Uncertainties::clear_status() {
  status_ = 0;
}
inline ::vutura::gps::GPSFix_Status GPSFix_Uncertainties::status() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.Uncertainties.status)
  return static_cast< ::vutura::gps::GPSFix_Status >(status_);
}
inline void GPSFix_Uncertainties::set_status(::vutura::gps::GPSFix_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.Uncertainties.status)
}

// float latitude = 3;
inline void GPSFix_Uncertainties::clear_latitude() {
  latitude_ = 0;
}
inline float GPSFix_Uncertainties::latitude() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.Uncertainties.latitude)
  return latitude_;
}
inline void GPSFix_Uncertainties::set_latitude(float value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.Uncertainties.latitude)
}

// float longitude = 4;
inline void GPSFix_Uncertainties::clear_longitude() {
  longitude_ = 0;
}
inline float GPSFix_Uncertainties::longitude() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.Uncertainties.longitude)
  return longitude_;
}
inline void GPSFix_Uncertainties::set_longitude(float value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.Uncertainties.longitude)
}

// float altitude = 5;
inline void GPSFix_Uncertainties::clear_altitude() {
  altitude_ = 0;
}
inline float GPSFix_Uncertainties::altitude() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.Uncertainties.altitude)
  return altitude_;
}
inline void GPSFix_Uncertainties::set_altitude(float value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.Uncertainties.altitude)
}

// float track = 6;
inline void GPSFix_Uncertainties::clear_track() {
  track_ = 0;
}
inline float GPSFix_Uncertainties::track() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.Uncertainties.track)
  return track_;
}
inline void GPSFix_Uncertainties::set_track(float value) {
  
  track_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.Uncertainties.track)
}

// float speed = 7;
inline void GPSFix_Uncertainties::clear_speed() {
  speed_ = 0;
}
inline float GPSFix_Uncertainties::speed() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.Uncertainties.speed)
  return speed_;
}
inline void GPSFix_Uncertainties::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.Uncertainties.speed)
}

// float climb = 8;
inline void GPSFix_Uncertainties::clear_climb() {
  climb_ = 0;
}
inline float GPSFix_Uncertainties::climb() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.Uncertainties.climb)
  return climb_;
}
inline void GPSFix_Uncertainties::set_climb(float value) {
  
  climb_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.Uncertainties.climb)
}

// -------------------------------------------------------------------

// GPSFix

// uint64 time = 1;
inline void GPSFix::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GPSFix::time() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.time)
  return time_;
}
inline void GPSFix::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.time)
}

// .vutura.gps.GPSFix.Status status = 2;
inline void GPSFix::clear_status() {
  status_ = 0;
}
inline ::vutura::gps::GPSFix_Status GPSFix::status() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.status)
  return static_cast< ::vutura::gps::GPSFix_Status >(status_);
}
inline void GPSFix::set_status(::vutura::gps::GPSFix_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.status)
}

// float latitude = 3;
inline void GPSFix::clear_latitude() {
  latitude_ = 0;
}
inline float GPSFix::latitude() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.latitude)
  return latitude_;
}
inline void GPSFix::set_latitude(float value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.latitude)
}

// float longitude = 4;
inline void GPSFix::clear_longitude() {
  longitude_ = 0;
}
inline float GPSFix::longitude() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.longitude)
  return longitude_;
}
inline void GPSFix::set_longitude(float value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.longitude)
}

// float altitude = 5;
inline void GPSFix::clear_altitude() {
  altitude_ = 0;
}
inline float GPSFix::altitude() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.altitude)
  return altitude_;
}
inline void GPSFix::set_altitude(float value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.altitude)
}

// float track = 6;
inline void GPSFix::clear_track() {
  track_ = 0;
}
inline float GPSFix::track() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.track)
  return track_;
}
inline void GPSFix::set_track(float value) {
  
  track_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.track)
}

// float speed = 7;
inline void GPSFix::clear_speed() {
  speed_ = 0;
}
inline float GPSFix::speed() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.speed)
  return speed_;
}
inline void GPSFix::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.speed)
}

// float climb = 8;
inline void GPSFix::clear_climb() {
  climb_ = 0;
}
inline float GPSFix::climb() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.climb)
  return climb_;
}
inline void GPSFix::set_climb(float value) {
  
  climb_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.climb)
}

// .vutura.gps.GPSFix.Uncertainties uncertainties = 9;
inline bool GPSFix::has_uncertainties() const {
  return this != internal_default_instance() && uncertainties_ != nullptr;
}
inline void GPSFix::clear_uncertainties() {
  if (GetArenaNoVirtual() == nullptr && uncertainties_ != nullptr) {
    delete uncertainties_;
  }
  uncertainties_ = nullptr;
}
inline const ::vutura::gps::GPSFix_Uncertainties& GPSFix::uncertainties() const {
  const ::vutura::gps::GPSFix_Uncertainties* p = uncertainties_;
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.uncertainties)
  return p != nullptr ? *p : *reinterpret_cast<const ::vutura::gps::GPSFix_Uncertainties*>(
      &::vutura::gps::_GPSFix_Uncertainties_default_instance_);
}
inline ::vutura::gps::GPSFix_Uncertainties* GPSFix::release_uncertainties() {
  // @@protoc_insertion_point(field_release:vutura.gps.GPSFix.uncertainties)
  
  ::vutura::gps::GPSFix_Uncertainties* temp = uncertainties_;
  uncertainties_ = nullptr;
  return temp;
}
inline ::vutura::gps::GPSFix_Uncertainties* GPSFix::mutable_uncertainties() {
  
  if (uncertainties_ == nullptr) {
    auto* p = CreateMaybeMessage<::vutura::gps::GPSFix_Uncertainties>(GetArenaNoVirtual());
    uncertainties_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vutura.gps.GPSFix.uncertainties)
  return uncertainties_;
}
inline void GPSFix::set_allocated_uncertainties(::vutura::gps::GPSFix_Uncertainties* uncertainties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uncertainties_;
  }
  if (uncertainties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uncertainties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uncertainties, submessage_arena);
    }
    
  } else {
    
  }
  uncertainties_ = uncertainties;
  // @@protoc_insertion_point(field_set_allocated:vutura.gps.GPSFix.uncertainties)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gps
}  // namespace vutura

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vutura::gps::GPSFix_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vutura::gps::GPSFix_Status>() {
  return ::vutura::gps::GPSFix_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gps_2ddata_2eproto
