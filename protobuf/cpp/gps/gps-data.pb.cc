// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gps/gps-data.proto

#include "gps/gps-data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gps_2fgps_2ddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPSFix_Uncertainties_gps_2fgps_2ddata_2eproto;
namespace vutura {
namespace gps {
class EmptyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Empty> _instance;
} _Empty_default_instance_;
class GPSFix_UncertaintiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPSFix_Uncertainties> _instance;
} _GPSFix_Uncertainties_default_instance_;
class GPSFixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPSFix> _instance;
} _GPSFix_default_instance_;
}  // namespace gps
}  // namespace vutura
static void InitDefaultsscc_info_Empty_gps_2fgps_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vutura::gps::_Empty_default_instance_;
    new (ptr) ::vutura::gps::Empty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vutura::gps::Empty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Empty_gps_2fgps_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Empty_gps_2fgps_2ddata_2eproto}, {}};

static void InitDefaultsscc_info_GPSFix_gps_2fgps_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vutura::gps::_GPSFix_default_instance_;
    new (ptr) ::vutura::gps::GPSFix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vutura::gps::GPSFix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GPSFix_gps_2fgps_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GPSFix_gps_2fgps_2ddata_2eproto}, {
      &scc_info_GPSFix_Uncertainties_gps_2fgps_2ddata_2eproto.base,}};

static void InitDefaultsscc_info_GPSFix_Uncertainties_gps_2fgps_2ddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vutura::gps::_GPSFix_Uncertainties_default_instance_;
    new (ptr) ::vutura::gps::GPSFix_Uncertainties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vutura::gps::GPSFix_Uncertainties::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPSFix_Uncertainties_gps_2fgps_2ddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GPSFix_Uncertainties_gps_2fgps_2ddata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gps_2fgps_2ddata_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gps_2fgps_2ddata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gps_2fgps_2ddata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gps_2fgps_2ddata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vutura::gps::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix_Uncertainties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix_Uncertainties, time_),
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix_Uncertainties, status_),
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix_Uncertainties, latitude_),
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix_Uncertainties, longitude_),
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix_Uncertainties, altitude_),
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix_Uncertainties, track_),
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix_Uncertainties, speed_),
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix_Uncertainties, climb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix, time_),
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix, status_),
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix, latitude_),
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix, longitude_),
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix, altitude_),
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix, track_),
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix, speed_),
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix, climb_),
  PROTOBUF_FIELD_OFFSET(::vutura::gps::GPSFix, uncertainties_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vutura::gps::Empty)},
  { 5, -1, sizeof(::vutura::gps::GPSFix_Uncertainties)},
  { 18, -1, sizeof(::vutura::gps::GPSFix)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vutura::gps::_Empty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vutura::gps::_GPSFix_Uncertainties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vutura::gps::_GPSFix_default_instance_),
};

const char descriptor_table_protodef_gps_2fgps_2ddata_2eproto[] =
  "\n\022gps/gps-data.proto\022\nvutura.gps\"\007\n\005Empt"
  "y\"\305\003\n\006GPSFix\022\014\n\004time\030\001 \001(\004\022)\n\006status\030\002 \001"
  "(\0162\031.vutura.gps.GPSFix.Status\022\020\n\010latitud"
  "e\030\003 \001(\002\022\021\n\tlongitude\030\004 \001(\002\022\020\n\010altitude\030\005"
  " \001(\002\022\r\n\005track\030\006 \001(\002\022\r\n\005speed\030\007 \001(\002\022\r\n\005cl"
  "imb\030\010 \001(\002\0227\n\runcertainties\030\t \001(\0132 .vutur"
  "a.gps.GPSFix.Uncertainties\032\254\001\n\rUncertain"
  "ties\022\014\n\004time\030\001 \001(\004\022)\n\006status\030\002 \001(\0162\031.vut"
  "ura.gps.GPSFix.Status\022\020\n\010latitude\030\003 \001(\002\022"
  "\021\n\tlongitude\030\004 \001(\002\022\020\n\010altitude\030\005 \001(\002\022\r\n\005"
  "track\030\006 \001(\002\022\r\n\005speed\030\007 \001(\002\022\r\n\005climb\030\010 \001("
  "\002\"6\n\006Status\022\013\n\007notSeen\020\000\022\t\n\005noFix\020\001\022\t\n\005f"
  "ix2D\020\003\022\t\n\005fix3D\020\0042v\n\nGPSService\0223\n\nGetGP"
  "SData\022\021.vutura.gps.Empty\032\022.vutura.gps.GP"
  "SFix\0223\n\nSetGPSData\022\022.vutura.gps.GPSFix\032\021"
  ".vutura.gps.Emptyb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gps_2fgps_2ddata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gps_2fgps_2ddata_2eproto_sccs[3] = {
  &scc_info_Empty_gps_2fgps_2ddata_2eproto.base,
  &scc_info_GPSFix_gps_2fgps_2ddata_2eproto.base,
  &scc_info_GPSFix_Uncertainties_gps_2fgps_2ddata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gps_2fgps_2ddata_2eproto_once;
static bool descriptor_table_gps_2fgps_2ddata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gps_2fgps_2ddata_2eproto = {
  &descriptor_table_gps_2fgps_2ddata_2eproto_initialized, descriptor_table_protodef_gps_2fgps_2ddata_2eproto, "gps/gps-data.proto", 625,
  &descriptor_table_gps_2fgps_2ddata_2eproto_once, descriptor_table_gps_2fgps_2ddata_2eproto_sccs, descriptor_table_gps_2fgps_2ddata_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_gps_2fgps_2ddata_2eproto::offsets,
  file_level_metadata_gps_2fgps_2ddata_2eproto, 3, file_level_enum_descriptors_gps_2fgps_2ddata_2eproto, file_level_service_descriptors_gps_2fgps_2ddata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gps_2fgps_2ddata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gps_2fgps_2ddata_2eproto), true);
namespace vutura {
namespace gps {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GPSFix_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gps_2fgps_2ddata_2eproto);
  return file_level_enum_descriptors_gps_2fgps_2ddata_2eproto[0];
}
bool GPSFix_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GPSFix_Status GPSFix::notSeen;
constexpr GPSFix_Status GPSFix::noFix;
constexpr GPSFix_Status GPSFix::fix2D;
constexpr GPSFix_Status GPSFix::fix3D;
constexpr GPSFix_Status GPSFix::Status_MIN;
constexpr GPSFix_Status GPSFix::Status_MAX;
constexpr int GPSFix::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Empty::InitAsDefaultInstance() {
}
class Empty::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vutura.gps.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vutura.gps.Empty)
}

void Empty::SharedCtor() {
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:vutura.gps.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Empty& Empty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Empty_gps_2fgps_2ddata_2eproto.base);
  return *internal_default_instance();
}


void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:vutura.gps.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Empty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Empty::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vutura.gps.Empty)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:vutura.gps.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vutura.gps.Empty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Empty::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vutura.gps.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vutura.gps.Empty)
}

::PROTOBUF_NAMESPACE_ID::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vutura.gps.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vutura.gps.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vutura.gps.Empty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vutura.gps.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Empty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vutura.gps.Empty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vutura.gps.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vutura.gps.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vutura.gps.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vutura.gps.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPSFix_Uncertainties::InitAsDefaultInstance() {
}
class GPSFix_Uncertainties::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GPSFix_Uncertainties::kTimeFieldNumber;
const int GPSFix_Uncertainties::kStatusFieldNumber;
const int GPSFix_Uncertainties::kLatitudeFieldNumber;
const int GPSFix_Uncertainties::kLongitudeFieldNumber;
const int GPSFix_Uncertainties::kAltitudeFieldNumber;
const int GPSFix_Uncertainties::kTrackFieldNumber;
const int GPSFix_Uncertainties::kSpeedFieldNumber;
const int GPSFix_Uncertainties::kClimbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GPSFix_Uncertainties::GPSFix_Uncertainties()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vutura.gps.GPSFix.Uncertainties)
}
GPSFix_Uncertainties::GPSFix_Uncertainties(const GPSFix_Uncertainties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&climb_) -
    reinterpret_cast<char*>(&time_)) + sizeof(climb_));
  // @@protoc_insertion_point(copy_constructor:vutura.gps.GPSFix.Uncertainties)
}

void GPSFix_Uncertainties::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&climb_) -
      reinterpret_cast<char*>(&time_)) + sizeof(climb_));
}

GPSFix_Uncertainties::~GPSFix_Uncertainties() {
  // @@protoc_insertion_point(destructor:vutura.gps.GPSFix.Uncertainties)
  SharedDtor();
}

void GPSFix_Uncertainties::SharedDtor() {
}

void GPSFix_Uncertainties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPSFix_Uncertainties& GPSFix_Uncertainties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPSFix_Uncertainties_gps_2fgps_2ddata_2eproto.base);
  return *internal_default_instance();
}


void GPSFix_Uncertainties::Clear() {
// @@protoc_insertion_point(message_clear_start:vutura.gps.GPSFix.Uncertainties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&climb_) -
      reinterpret_cast<char*>(&time_)) + sizeof(climb_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GPSFix_Uncertainties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vutura.gps.GPSFix.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status(static_cast<::vutura::gps::GPSFix_Status>(val));
        } else goto handle_unusual;
        continue;
      // float latitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float longitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float altitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float track = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          track_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float climb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          climb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GPSFix_Uncertainties::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vutura.gps.GPSFix.Uncertainties)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vutura.gps.GPSFix.Status status = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::vutura::gps::GPSFix_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latitude = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longitude = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float track = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &track_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float climb = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &climb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vutura.gps.GPSFix.Uncertainties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vutura.gps.GPSFix.Uncertainties)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GPSFix_Uncertainties::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vutura.gps.GPSFix.Uncertainties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // .vutura.gps.GPSFix.Status status = 2;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // float latitude = 3;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->latitude(), output);
  }

  // float longitude = 4;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->longitude(), output);
  }

  // float altitude = 5;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->altitude(), output);
  }

  // float track = 6;
  if (!(this->track() <= 0 && this->track() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->track(), output);
  }

  // float speed = 7;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->speed(), output);
  }

  // float climb = 8;
  if (!(this->climb() <= 0 && this->climb() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->climb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vutura.gps.GPSFix.Uncertainties)
}

::PROTOBUF_NAMESPACE_ID::uint8* GPSFix_Uncertainties::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vutura.gps.GPSFix.Uncertainties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // .vutura.gps.GPSFix.Status status = 2;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // float latitude = 3;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->latitude(), target);
  }

  // float longitude = 4;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->longitude(), target);
  }

  // float altitude = 5;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->altitude(), target);
  }

  // float track = 6;
  if (!(this->track() <= 0 && this->track() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->track(), target);
  }

  // float speed = 7;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->speed(), target);
  }

  // float climb = 8;
  if (!(this->climb() <= 0 && this->climb() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->climb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vutura.gps.GPSFix.Uncertainties)
  return target;
}

size_t GPSFix_Uncertainties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vutura.gps.GPSFix.Uncertainties)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // .vutura.gps.GPSFix.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  // float latitude = 3;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float longitude = 4;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float altitude = 5;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float track = 6;
  if (!(this->track() <= 0 && this->track() >= 0)) {
    total_size += 1 + 4;
  }

  // float speed = 7;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float climb = 8;
  if (!(this->climb() <= 0 && this->climb() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPSFix_Uncertainties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vutura.gps.GPSFix.Uncertainties)
  GOOGLE_DCHECK_NE(&from, this);
  const GPSFix_Uncertainties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPSFix_Uncertainties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vutura.gps.GPSFix.Uncertainties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vutura.gps.GPSFix.Uncertainties)
    MergeFrom(*source);
  }
}

void GPSFix_Uncertainties::MergeFrom(const GPSFix_Uncertainties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vutura.gps.GPSFix.Uncertainties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    set_latitude(from.latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    set_longitude(from.longitude());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    set_altitude(from.altitude());
  }
  if (!(from.track() <= 0 && from.track() >= 0)) {
    set_track(from.track());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    set_speed(from.speed());
  }
  if (!(from.climb() <= 0 && from.climb() >= 0)) {
    set_climb(from.climb());
  }
}

void GPSFix_Uncertainties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vutura.gps.GPSFix.Uncertainties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSFix_Uncertainties::CopyFrom(const GPSFix_Uncertainties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vutura.gps.GPSFix.Uncertainties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSFix_Uncertainties::IsInitialized() const {
  return true;
}

void GPSFix_Uncertainties::Swap(GPSFix_Uncertainties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GPSFix_Uncertainties::InternalSwap(GPSFix_Uncertainties* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(status_, other->status_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(altitude_, other->altitude_);
  swap(track_, other->track_);
  swap(speed_, other->speed_);
  swap(climb_, other->climb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPSFix_Uncertainties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPSFix::InitAsDefaultInstance() {
  ::vutura::gps::_GPSFix_default_instance_._instance.get_mutable()->uncertainties_ = const_cast< ::vutura::gps::GPSFix_Uncertainties*>(
      ::vutura::gps::GPSFix_Uncertainties::internal_default_instance());
}
class GPSFix::HasBitSetters {
 public:
  static const ::vutura::gps::GPSFix_Uncertainties& uncertainties(const GPSFix* msg);
};

const ::vutura::gps::GPSFix_Uncertainties&
GPSFix::HasBitSetters::uncertainties(const GPSFix* msg) {
  return *msg->uncertainties_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GPSFix::kTimeFieldNumber;
const int GPSFix::kStatusFieldNumber;
const int GPSFix::kLatitudeFieldNumber;
const int GPSFix::kLongitudeFieldNumber;
const int GPSFix::kAltitudeFieldNumber;
const int GPSFix::kTrackFieldNumber;
const int GPSFix::kSpeedFieldNumber;
const int GPSFix::kClimbFieldNumber;
const int GPSFix::kUncertaintiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GPSFix::GPSFix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vutura.gps.GPSFix)
}
GPSFix::GPSFix(const GPSFix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_uncertainties()) {
    uncertainties_ = new ::vutura::gps::GPSFix_Uncertainties(*from.uncertainties_);
  } else {
    uncertainties_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&climb_) -
    reinterpret_cast<char*>(&time_)) + sizeof(climb_));
  // @@protoc_insertion_point(copy_constructor:vutura.gps.GPSFix)
}

void GPSFix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPSFix_gps_2fgps_2ddata_2eproto.base);
  ::memset(&uncertainties_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&climb_) -
      reinterpret_cast<char*>(&uncertainties_)) + sizeof(climb_));
}

GPSFix::~GPSFix() {
  // @@protoc_insertion_point(destructor:vutura.gps.GPSFix)
  SharedDtor();
}

void GPSFix::SharedDtor() {
  if (this != internal_default_instance()) delete uncertainties_;
}

void GPSFix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPSFix& GPSFix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPSFix_gps_2fgps_2ddata_2eproto.base);
  return *internal_default_instance();
}


void GPSFix::Clear() {
// @@protoc_insertion_point(message_clear_start:vutura.gps.GPSFix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && uncertainties_ != nullptr) {
    delete uncertainties_;
  }
  uncertainties_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&climb_) -
      reinterpret_cast<char*>(&time_)) + sizeof(climb_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GPSFix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vutura.gps.GPSFix.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status(static_cast<::vutura::gps::GPSFix_Status>(val));
        } else goto handle_unusual;
        continue;
      // float latitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float longitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float altitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float track = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          track_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float climb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          climb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .vutura.gps.GPSFix.Uncertainties uncertainties = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_uncertainties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GPSFix::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:vutura.gps.GPSFix)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vutura.gps.GPSFix.Status status = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::vutura::gps::GPSFix_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latitude = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longitude = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float track = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &track_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float climb = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &climb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vutura.gps.GPSFix.Uncertainties uncertainties = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uncertainties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vutura.gps.GPSFix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vutura.gps.GPSFix)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GPSFix::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vutura.gps.GPSFix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // .vutura.gps.GPSFix.Status status = 2;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // float latitude = 3;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->latitude(), output);
  }

  // float longitude = 4;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->longitude(), output);
  }

  // float altitude = 5;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->altitude(), output);
  }

  // float track = 6;
  if (!(this->track() <= 0 && this->track() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->track(), output);
  }

  // float speed = 7;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->speed(), output);
  }

  // float climb = 8;
  if (!(this->climb() <= 0 && this->climb() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->climb(), output);
  }

  // .vutura.gps.GPSFix.Uncertainties uncertainties = 9;
  if (this->has_uncertainties()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::uncertainties(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vutura.gps.GPSFix)
}

::PROTOBUF_NAMESPACE_ID::uint8* GPSFix::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vutura.gps.GPSFix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // .vutura.gps.GPSFix.Status status = 2;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // float latitude = 3;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->latitude(), target);
  }

  // float longitude = 4;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->longitude(), target);
  }

  // float altitude = 5;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->altitude(), target);
  }

  // float track = 6;
  if (!(this->track() <= 0 && this->track() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->track(), target);
  }

  // float speed = 7;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->speed(), target);
  }

  // float climb = 8;
  if (!(this->climb() <= 0 && this->climb() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->climb(), target);
  }

  // .vutura.gps.GPSFix.Uncertainties uncertainties = 9;
  if (this->has_uncertainties()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::uncertainties(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vutura.gps.GPSFix)
  return target;
}

size_t GPSFix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vutura.gps.GPSFix)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vutura.gps.GPSFix.Uncertainties uncertainties = 9;
  if (this->has_uncertainties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uncertainties_);
  }

  // uint64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // .vutura.gps.GPSFix.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  // float latitude = 3;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float longitude = 4;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float altitude = 5;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float track = 6;
  if (!(this->track() <= 0 && this->track() >= 0)) {
    total_size += 1 + 4;
  }

  // float speed = 7;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  // float climb = 8;
  if (!(this->climb() <= 0 && this->climb() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPSFix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vutura.gps.GPSFix)
  GOOGLE_DCHECK_NE(&from, this);
  const GPSFix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPSFix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vutura.gps.GPSFix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vutura.gps.GPSFix)
    MergeFrom(*source);
  }
}

void GPSFix::MergeFrom(const GPSFix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vutura.gps.GPSFix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_uncertainties()) {
    mutable_uncertainties()->::vutura::gps::GPSFix_Uncertainties::MergeFrom(from.uncertainties());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    set_latitude(from.latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    set_longitude(from.longitude());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    set_altitude(from.altitude());
  }
  if (!(from.track() <= 0 && from.track() >= 0)) {
    set_track(from.track());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    set_speed(from.speed());
  }
  if (!(from.climb() <= 0 && from.climb() >= 0)) {
    set_climb(from.climb());
  }
}

void GPSFix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vutura.gps.GPSFix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSFix::CopyFrom(const GPSFix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vutura.gps.GPSFix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSFix::IsInitialized() const {
  return true;
}

void GPSFix::Swap(GPSFix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GPSFix::InternalSwap(GPSFix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uncertainties_, other->uncertainties_);
  swap(time_, other->time_);
  swap(status_, other->status_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(altitude_, other->altitude_);
  swap(track_, other->track_);
  swap(speed_, other->speed_);
  swap(climb_, other->climb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPSFix::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gps
}  // namespace vutura
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vutura::gps::Empty* Arena::CreateMaybeMessage< ::vutura::gps::Empty >(Arena* arena) {
  return Arena::CreateInternal< ::vutura::gps::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::vutura::gps::GPSFix_Uncertainties* Arena::CreateMaybeMessage< ::vutura::gps::GPSFix_Uncertainties >(Arena* arena) {
  return Arena::CreateInternal< ::vutura::gps::GPSFix_Uncertainties >(arena);
}
template<> PROTOBUF_NOINLINE ::vutura::gps::GPSFix* Arena::CreateMaybeMessage< ::vutura::gps::GPSFix >(Arena* arena) {
  return Arena::CreateInternal< ::vutura::gps::GPSFix >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
