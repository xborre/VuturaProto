// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gps-data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gps-data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vutura {
namespace gps {
class GPSFix_UncertaintiesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GPSFix_Uncertainties> {
} _GPSFix_Uncertainties_default_instance_;
class GPSFixDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GPSFix> {
} _GPSFix_default_instance_;

namespace protobuf_gps_2ddata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix_Uncertainties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix_Uncertainties, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix_Uncertainties, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix_Uncertainties, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix_Uncertainties, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix_Uncertainties, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix_Uncertainties, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix_Uncertainties, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix_Uncertainties, climb_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix, climb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSFix, uncertainties_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(GPSFix_Uncertainties)},
  { 12, -1, sizeof(GPSFix)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GPSFix_Uncertainties_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GPSFix_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "gps-data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _GPSFix_Uncertainties_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _GPSFix_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fempty_2eproto::InitDefaults();
  _GPSFix_Uncertainties_default_instance_.DefaultConstruct();
  _GPSFix_default_instance_.DefaultConstruct();
  _GPSFix_default_instance_.get_mutable()->uncertainties_ = const_cast< ::vutura::gps::GPSFix_Uncertainties*>(
      ::vutura::gps::GPSFix_Uncertainties::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016gps-data.proto\022\nvutura.gps\032\033google/pro"
      "tobuf/empty.proto\"\305\003\n\006GPSFix\022\014\n\004time\030\001 \001"
      "(\004\022)\n\006status\030\002 \001(\0162\031.vutura.gps.GPSFix.S"
      "tatus\022\020\n\010latitude\030\003 \001(\002\022\021\n\tlongitude\030\004 \001"
      "(\002\022\020\n\010altitude\030\005 \001(\002\022\r\n\005track\030\006 \001(\002\022\r\n\005s"
      "peed\030\007 \001(\002\022\r\n\005climb\030\010 \001(\002\0227\n\runcertainti"
      "es\030\t \001(\0132 .vutura.gps.GPSFix.Uncertainti"
      "es\032\254\001\n\rUncertainties\022\014\n\004time\030\001 \001(\004\022)\n\006st"
      "atus\030\002 \001(\0162\031.vutura.gps.GPSFix.Status\022\020\n"
      "\010latitude\030\003 \001(\002\022\021\n\tlongitude\030\004 \001(\002\022\020\n\010al"
      "titude\030\005 \001(\002\022\r\n\005track\030\006 \001(\002\022\r\n\005speed\030\007 \001"
      "(\002\022\r\n\005climb\030\010 \001(\002\"6\n\006Status\022\013\n\007notSeen\020\000"
      "\022\t\n\005noFix\020\001\022\t\n\005fix2D\020\003\022\t\n\005fix3D\020\0042\200\001\n\nGP"
      "SService\0228\n\nGetGPSData\022\026.google.protobuf"
      ".Empty\032\022.vutura.gps.GPSFix\0228\n\nSetGPSData"
      "\022\022.vutura.gps.GPSFix\032\026.google.protobuf.E"
      "mptyb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 652);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gps-data.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fempty_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_gps_2ddata_2eproto

const ::google::protobuf::EnumDescriptor* GPSFix_Status_descriptor() {
  protobuf_gps_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gps_2ddata_2eproto::file_level_enum_descriptors[0];
}
bool GPSFix_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GPSFix_Status GPSFix::notSeen;
const GPSFix_Status GPSFix::noFix;
const GPSFix_Status GPSFix::fix2D;
const GPSFix_Status GPSFix::fix3D;
const GPSFix_Status GPSFix::Status_MIN;
const GPSFix_Status GPSFix::Status_MAX;
const int GPSFix::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GPSFix_Uncertainties::kTimeFieldNumber;
const int GPSFix_Uncertainties::kStatusFieldNumber;
const int GPSFix_Uncertainties::kLatitudeFieldNumber;
const int GPSFix_Uncertainties::kLongitudeFieldNumber;
const int GPSFix_Uncertainties::kAltitudeFieldNumber;
const int GPSFix_Uncertainties::kTrackFieldNumber;
const int GPSFix_Uncertainties::kSpeedFieldNumber;
const int GPSFix_Uncertainties::kClimbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GPSFix_Uncertainties::GPSFix_Uncertainties()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gps_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vutura.gps.GPSFix.Uncertainties)
}
GPSFix_Uncertainties::GPSFix_Uncertainties(const GPSFix_Uncertainties& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&climb_) -
    reinterpret_cast<char*>(&time_) + sizeof(climb_));
  // @@protoc_insertion_point(copy_constructor:vutura.gps.GPSFix.Uncertainties)
}

void GPSFix_Uncertainties::SharedCtor() {
  ::memset(&time_, 0, reinterpret_cast<char*>(&climb_) -
    reinterpret_cast<char*>(&time_) + sizeof(climb_));
  _cached_size_ = 0;
}

GPSFix_Uncertainties::~GPSFix_Uncertainties() {
  // @@protoc_insertion_point(destructor:vutura.gps.GPSFix.Uncertainties)
  SharedDtor();
}

void GPSFix_Uncertainties::SharedDtor() {
}

void GPSFix_Uncertainties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSFix_Uncertainties::descriptor() {
  protobuf_gps_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gps_2ddata_2eproto::file_level_metadata[0].descriptor;
}

const GPSFix_Uncertainties& GPSFix_Uncertainties::default_instance() {
  protobuf_gps_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

GPSFix_Uncertainties* GPSFix_Uncertainties::New(::google::protobuf::Arena* arena) const {
  GPSFix_Uncertainties* n = new GPSFix_Uncertainties;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GPSFix_Uncertainties::Clear() {
// @@protoc_insertion_point(message_clear_start:vutura.gps.GPSFix.Uncertainties)
  ::memset(&time_, 0, reinterpret_cast<char*>(&climb_) -
    reinterpret_cast<char*>(&time_) + sizeof(climb_));
}

bool GPSFix_Uncertainties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vutura.gps.GPSFix.Uncertainties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 time = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vutura.gps.GPSFix.Status status = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::vutura::gps::GPSFix_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latitude = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longitude = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float track = 6;
      case 6: {
        if (tag == 53u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &track_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 7;
      case 7: {
        if (tag == 61u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float climb = 8;
      case 8: {
        if (tag == 69u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &climb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vutura.gps.GPSFix.Uncertainties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vutura.gps.GPSFix.Uncertainties)
  return false;
#undef DO_
}

void GPSFix_Uncertainties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vutura.gps.GPSFix.Uncertainties)
  // uint64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // .vutura.gps.GPSFix.Status status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // float latitude = 3;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->latitude(), output);
  }

  // float longitude = 4;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->longitude(), output);
  }

  // float altitude = 5;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->altitude(), output);
  }

  // float track = 6;
  if (this->track() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->track(), output);
  }

  // float speed = 7;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->speed(), output);
  }

  // float climb = 8;
  if (this->climb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->climb(), output);
  }

  // @@protoc_insertion_point(serialize_end:vutura.gps.GPSFix.Uncertainties)
}

::google::protobuf::uint8* GPSFix_Uncertainties::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vutura.gps.GPSFix.Uncertainties)
  // uint64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // .vutura.gps.GPSFix.Status status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // float latitude = 3;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->latitude(), target);
  }

  // float longitude = 4;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->longitude(), target);
  }

  // float altitude = 5;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->altitude(), target);
  }

  // float track = 6;
  if (this->track() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->track(), target);
  }

  // float speed = 7;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->speed(), target);
  }

  // float climb = 8;
  if (this->climb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->climb(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vutura.gps.GPSFix.Uncertainties)
  return target;
}

size_t GPSFix_Uncertainties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vutura.gps.GPSFix.Uncertainties)
  size_t total_size = 0;

  // uint64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // .vutura.gps.GPSFix.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // float latitude = 3;
  if (this->latitude() != 0) {
    total_size += 1 + 4;
  }

  // float longitude = 4;
  if (this->longitude() != 0) {
    total_size += 1 + 4;
  }

  // float altitude = 5;
  if (this->altitude() != 0) {
    total_size += 1 + 4;
  }

  // float track = 6;
  if (this->track() != 0) {
    total_size += 1 + 4;
  }

  // float speed = 7;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // float climb = 8;
  if (this->climb() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSFix_Uncertainties::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vutura.gps.GPSFix.Uncertainties)
  GOOGLE_DCHECK_NE(&from, this);
  const GPSFix_Uncertainties* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GPSFix_Uncertainties>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vutura.gps.GPSFix.Uncertainties)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vutura.gps.GPSFix.Uncertainties)
    MergeFrom(*source);
  }
}

void GPSFix_Uncertainties::MergeFrom(const GPSFix_Uncertainties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vutura.gps.GPSFix.Uncertainties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.track() != 0) {
    set_track(from.track());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.climb() != 0) {
    set_climb(from.climb());
  }
}

void GPSFix_Uncertainties::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vutura.gps.GPSFix.Uncertainties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSFix_Uncertainties::CopyFrom(const GPSFix_Uncertainties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vutura.gps.GPSFix.Uncertainties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSFix_Uncertainties::IsInitialized() const {
  return true;
}

void GPSFix_Uncertainties::Swap(GPSFix_Uncertainties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GPSFix_Uncertainties::InternalSwap(GPSFix_Uncertainties* other) {
  std::swap(time_, other->time_);
  std::swap(status_, other->status_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(altitude_, other->altitude_);
  std::swap(track_, other->track_);
  std::swap(speed_, other->speed_);
  std::swap(climb_, other->climb_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GPSFix_Uncertainties::GetMetadata() const {
  protobuf_gps_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gps_2ddata_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GPSFix_Uncertainties

// uint64 time = 1;
void GPSFix_Uncertainties::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GPSFix_Uncertainties::time() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.Uncertainties.time)
  return time_;
}
void GPSFix_Uncertainties::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.Uncertainties.time)
}

// .vutura.gps.GPSFix.Status status = 2;
void GPSFix_Uncertainties::clear_status() {
  status_ = 0;
}
::vutura::gps::GPSFix_Status GPSFix_Uncertainties::status() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.Uncertainties.status)
  return static_cast< ::vutura::gps::GPSFix_Status >(status_);
}
void GPSFix_Uncertainties::set_status(::vutura::gps::GPSFix_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.Uncertainties.status)
}

// float latitude = 3;
void GPSFix_Uncertainties::clear_latitude() {
  latitude_ = 0;
}
float GPSFix_Uncertainties::latitude() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.Uncertainties.latitude)
  return latitude_;
}
void GPSFix_Uncertainties::set_latitude(float value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.Uncertainties.latitude)
}

// float longitude = 4;
void GPSFix_Uncertainties::clear_longitude() {
  longitude_ = 0;
}
float GPSFix_Uncertainties::longitude() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.Uncertainties.longitude)
  return longitude_;
}
void GPSFix_Uncertainties::set_longitude(float value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.Uncertainties.longitude)
}

// float altitude = 5;
void GPSFix_Uncertainties::clear_altitude() {
  altitude_ = 0;
}
float GPSFix_Uncertainties::altitude() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.Uncertainties.altitude)
  return altitude_;
}
void GPSFix_Uncertainties::set_altitude(float value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.Uncertainties.altitude)
}

// float track = 6;
void GPSFix_Uncertainties::clear_track() {
  track_ = 0;
}
float GPSFix_Uncertainties::track() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.Uncertainties.track)
  return track_;
}
void GPSFix_Uncertainties::set_track(float value) {
  
  track_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.Uncertainties.track)
}

// float speed = 7;
void GPSFix_Uncertainties::clear_speed() {
  speed_ = 0;
}
float GPSFix_Uncertainties::speed() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.Uncertainties.speed)
  return speed_;
}
void GPSFix_Uncertainties::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.Uncertainties.speed)
}

// float climb = 8;
void GPSFix_Uncertainties::clear_climb() {
  climb_ = 0;
}
float GPSFix_Uncertainties::climb() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.Uncertainties.climb)
  return climb_;
}
void GPSFix_Uncertainties::set_climb(float value) {
  
  climb_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.Uncertainties.climb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GPSFix::kTimeFieldNumber;
const int GPSFix::kStatusFieldNumber;
const int GPSFix::kLatitudeFieldNumber;
const int GPSFix::kLongitudeFieldNumber;
const int GPSFix::kAltitudeFieldNumber;
const int GPSFix::kTrackFieldNumber;
const int GPSFix::kSpeedFieldNumber;
const int GPSFix::kClimbFieldNumber;
const int GPSFix::kUncertaintiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GPSFix::GPSFix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gps_2ddata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vutura.gps.GPSFix)
}
GPSFix::GPSFix(const GPSFix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_uncertainties()) {
    uncertainties_ = new ::vutura::gps::GPSFix_Uncertainties(*from.uncertainties_);
  } else {
    uncertainties_ = NULL;
  }
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&climb_) -
    reinterpret_cast<char*>(&time_) + sizeof(climb_));
  // @@protoc_insertion_point(copy_constructor:vutura.gps.GPSFix)
}

void GPSFix::SharedCtor() {
  ::memset(&uncertainties_, 0, reinterpret_cast<char*>(&climb_) -
    reinterpret_cast<char*>(&uncertainties_) + sizeof(climb_));
  _cached_size_ = 0;
}

GPSFix::~GPSFix() {
  // @@protoc_insertion_point(destructor:vutura.gps.GPSFix)
  SharedDtor();
}

void GPSFix::SharedDtor() {
  if (this != internal_default_instance()) {
    delete uncertainties_;
  }
}

void GPSFix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSFix::descriptor() {
  protobuf_gps_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gps_2ddata_2eproto::file_level_metadata[1].descriptor;
}

const GPSFix& GPSFix::default_instance() {
  protobuf_gps_2ddata_2eproto::InitDefaults();
  return *internal_default_instance();
}

GPSFix* GPSFix::New(::google::protobuf::Arena* arena) const {
  GPSFix* n = new GPSFix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GPSFix::Clear() {
// @@protoc_insertion_point(message_clear_start:vutura.gps.GPSFix)
  if (GetArenaNoVirtual() == NULL && uncertainties_ != NULL) {
    delete uncertainties_;
  }
  uncertainties_ = NULL;
  ::memset(&time_, 0, reinterpret_cast<char*>(&climb_) -
    reinterpret_cast<char*>(&time_) + sizeof(climb_));
}

bool GPSFix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vutura.gps.GPSFix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 time = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vutura.gps.GPSFix.Status status = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::vutura::gps::GPSFix_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latitude = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longitude = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float track = 6;
      case 6: {
        if (tag == 53u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &track_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 7;
      case 7: {
        if (tag == 61u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float climb = 8;
      case 8: {
        if (tag == 69u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &climb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vutura.gps.GPSFix.Uncertainties uncertainties = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uncertainties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vutura.gps.GPSFix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vutura.gps.GPSFix)
  return false;
#undef DO_
}

void GPSFix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vutura.gps.GPSFix)
  // uint64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // .vutura.gps.GPSFix.Status status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // float latitude = 3;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->latitude(), output);
  }

  // float longitude = 4;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->longitude(), output);
  }

  // float altitude = 5;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->altitude(), output);
  }

  // float track = 6;
  if (this->track() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->track(), output);
  }

  // float speed = 7;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->speed(), output);
  }

  // float climb = 8;
  if (this->climb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->climb(), output);
  }

  // .vutura.gps.GPSFix.Uncertainties uncertainties = 9;
  if (this->has_uncertainties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->uncertainties_, output);
  }

  // @@protoc_insertion_point(serialize_end:vutura.gps.GPSFix)
}

::google::protobuf::uint8* GPSFix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vutura.gps.GPSFix)
  // uint64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // .vutura.gps.GPSFix.Status status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // float latitude = 3;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->latitude(), target);
  }

  // float longitude = 4;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->longitude(), target);
  }

  // float altitude = 5;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->altitude(), target);
  }

  // float track = 6;
  if (this->track() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->track(), target);
  }

  // float speed = 7;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->speed(), target);
  }

  // float climb = 8;
  if (this->climb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->climb(), target);
  }

  // .vutura.gps.GPSFix.Uncertainties uncertainties = 9;
  if (this->has_uncertainties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->uncertainties_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:vutura.gps.GPSFix)
  return target;
}

size_t GPSFix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vutura.gps.GPSFix)
  size_t total_size = 0;

  // .vutura.gps.GPSFix.Uncertainties uncertainties = 9;
  if (this->has_uncertainties()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uncertainties_);
  }

  // uint64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // .vutura.gps.GPSFix.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // float latitude = 3;
  if (this->latitude() != 0) {
    total_size += 1 + 4;
  }

  // float longitude = 4;
  if (this->longitude() != 0) {
    total_size += 1 + 4;
  }

  // float altitude = 5;
  if (this->altitude() != 0) {
    total_size += 1 + 4;
  }

  // float track = 6;
  if (this->track() != 0) {
    total_size += 1 + 4;
  }

  // float speed = 7;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // float climb = 8;
  if (this->climb() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSFix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vutura.gps.GPSFix)
  GOOGLE_DCHECK_NE(&from, this);
  const GPSFix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GPSFix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vutura.gps.GPSFix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vutura.gps.GPSFix)
    MergeFrom(*source);
  }
}

void GPSFix::MergeFrom(const GPSFix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vutura.gps.GPSFix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_uncertainties()) {
    mutable_uncertainties()->::vutura::gps::GPSFix_Uncertainties::MergeFrom(from.uncertainties());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.track() != 0) {
    set_track(from.track());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.climb() != 0) {
    set_climb(from.climb());
  }
}

void GPSFix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vutura.gps.GPSFix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSFix::CopyFrom(const GPSFix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vutura.gps.GPSFix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSFix::IsInitialized() const {
  return true;
}

void GPSFix::Swap(GPSFix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GPSFix::InternalSwap(GPSFix* other) {
  std::swap(uncertainties_, other->uncertainties_);
  std::swap(time_, other->time_);
  std::swap(status_, other->status_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(altitude_, other->altitude_);
  std::swap(track_, other->track_);
  std::swap(speed_, other->speed_);
  std::swap(climb_, other->climb_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GPSFix::GetMetadata() const {
  protobuf_gps_2ddata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gps_2ddata_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GPSFix

// uint64 time = 1;
void GPSFix::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GPSFix::time() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.time)
  return time_;
}
void GPSFix::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.time)
}

// .vutura.gps.GPSFix.Status status = 2;
void GPSFix::clear_status() {
  status_ = 0;
}
::vutura::gps::GPSFix_Status GPSFix::status() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.status)
  return static_cast< ::vutura::gps::GPSFix_Status >(status_);
}
void GPSFix::set_status(::vutura::gps::GPSFix_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.status)
}

// float latitude = 3;
void GPSFix::clear_latitude() {
  latitude_ = 0;
}
float GPSFix::latitude() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.latitude)
  return latitude_;
}
void GPSFix::set_latitude(float value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.latitude)
}

// float longitude = 4;
void GPSFix::clear_longitude() {
  longitude_ = 0;
}
float GPSFix::longitude() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.longitude)
  return longitude_;
}
void GPSFix::set_longitude(float value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.longitude)
}

// float altitude = 5;
void GPSFix::clear_altitude() {
  altitude_ = 0;
}
float GPSFix::altitude() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.altitude)
  return altitude_;
}
void GPSFix::set_altitude(float value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.altitude)
}

// float track = 6;
void GPSFix::clear_track() {
  track_ = 0;
}
float GPSFix::track() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.track)
  return track_;
}
void GPSFix::set_track(float value) {
  
  track_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.track)
}

// float speed = 7;
void GPSFix::clear_speed() {
  speed_ = 0;
}
float GPSFix::speed() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.speed)
  return speed_;
}
void GPSFix::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.speed)
}

// float climb = 8;
void GPSFix::clear_climb() {
  climb_ = 0;
}
float GPSFix::climb() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.climb)
  return climb_;
}
void GPSFix::set_climb(float value) {
  
  climb_ = value;
  // @@protoc_insertion_point(field_set:vutura.gps.GPSFix.climb)
}

// .vutura.gps.GPSFix.Uncertainties uncertainties = 9;
bool GPSFix::has_uncertainties() const {
  return this != internal_default_instance() && uncertainties_ != NULL;
}
void GPSFix::clear_uncertainties() {
  if (GetArenaNoVirtual() == NULL && uncertainties_ != NULL) delete uncertainties_;
  uncertainties_ = NULL;
}
const ::vutura::gps::GPSFix_Uncertainties& GPSFix::uncertainties() const {
  // @@protoc_insertion_point(field_get:vutura.gps.GPSFix.uncertainties)
  return uncertainties_ != NULL ? *uncertainties_
                         : *::vutura::gps::GPSFix_Uncertainties::internal_default_instance();
}
::vutura::gps::GPSFix_Uncertainties* GPSFix::mutable_uncertainties() {
  
  if (uncertainties_ == NULL) {
    uncertainties_ = new ::vutura::gps::GPSFix_Uncertainties;
  }
  // @@protoc_insertion_point(field_mutable:vutura.gps.GPSFix.uncertainties)
  return uncertainties_;
}
::vutura::gps::GPSFix_Uncertainties* GPSFix::release_uncertainties() {
  // @@protoc_insertion_point(field_release:vutura.gps.GPSFix.uncertainties)
  
  ::vutura::gps::GPSFix_Uncertainties* temp = uncertainties_;
  uncertainties_ = NULL;
  return temp;
}
void GPSFix::set_allocated_uncertainties(::vutura::gps::GPSFix_Uncertainties* uncertainties) {
  delete uncertainties_;
  uncertainties_ = uncertainties;
  if (uncertainties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vutura.gps.GPSFix.uncertainties)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gps
}  // namespace vutura

// @@protoc_insertion_point(global_scope)
