// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lora-obstacles.proto

#ifndef PROTOBUF_lora_2dobstacles_2eproto__INCLUDED
#define PROTOBUF_lora_2dobstacles_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
namespace google {
namespace protobuf {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
}  // namespace protobuf
}  // namespace google
namespace vutura {
namespace obstacles {
class CollisionWarning;
class CollisionWarningDefaultTypeInternal;
extern CollisionWarningDefaultTypeInternal _CollisionWarning_default_instance_;
class CollisionWarnings;
class CollisionWarningsDefaultTypeInternal;
extern CollisionWarningsDefaultTypeInternal _CollisionWarnings_default_instance_;
class Obstacle;
class ObstacleDefaultTypeInternal;
extern ObstacleDefaultTypeInternal _Obstacle_default_instance_;
class Obstacle_Fence;
class Obstacle_FenceDefaultTypeInternal;
extern Obstacle_FenceDefaultTypeInternal _Obstacle_Fence_default_instance_;
class Obstacle_Position;
class Obstacle_PositionDefaultTypeInternal;
extern Obstacle_PositionDefaultTypeInternal _Obstacle_Position_default_instance_;
class TagsResponse;
class TagsResponseDefaultTypeInternal;
extern TagsResponseDefaultTypeInternal _TagsResponse_default_instance_;
}  // namespace obstacles
}  // namespace vutura

namespace vutura {
namespace obstacles {

namespace protobuf_lora_2dobstacles_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_lora_2dobstacles_2eproto

enum Obstacle_Type {
  Obstacle_Type_FIRE_FIGHTER = 0,
  Obstacle_Type_FIRE_TRUCK = 1,
  Obstacle_Type_Obstacle_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Obstacle_Type_Obstacle_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Obstacle_Type_IsValid(int value);
const Obstacle_Type Obstacle_Type_Type_MIN = Obstacle_Type_FIRE_FIGHTER;
const Obstacle_Type Obstacle_Type_Type_MAX = Obstacle_Type_FIRE_TRUCK;
const int Obstacle_Type_Type_ARRAYSIZE = Obstacle_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Obstacle_Type_descriptor();
inline const ::std::string& Obstacle_Type_Name(Obstacle_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Obstacle_Type_descriptor(), value);
}
inline bool Obstacle_Type_Parse(
    const ::std::string& name, Obstacle_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Obstacle_Type>(
    Obstacle_Type_descriptor(), name, value);
}
// ===================================================================

class TagsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vutura.obstacles.TagsResponse) */ {
 public:
  TagsResponse();
  virtual ~TagsResponse();

  TagsResponse(const TagsResponse& from);

  inline TagsResponse& operator=(const TagsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TagsResponse& default_instance();

  static inline const TagsResponse* internal_default_instance() {
    return reinterpret_cast<const TagsResponse*>(
               &_TagsResponse_default_instance_);
  }

  void Swap(TagsResponse* other);

  // implements Message ----------------------------------------------

  inline TagsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TagsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TagsResponse& from);
  void MergeFrom(const TagsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TagsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vutura.obstacles.Obstacle obstacles = 1;
  int obstacles_size() const;
  void clear_obstacles();
  static const int kObstaclesFieldNumber = 1;
  const ::vutura::obstacles::Obstacle& obstacles(int index) const;
  ::vutura::obstacles::Obstacle* mutable_obstacles(int index);
  ::vutura::obstacles::Obstacle* add_obstacles();
  ::google::protobuf::RepeatedPtrField< ::vutura::obstacles::Obstacle >*
      mutable_obstacles();
  const ::google::protobuf::RepeatedPtrField< ::vutura::obstacles::Obstacle >&
      obstacles() const;

  // @@protoc_insertion_point(class_scope:vutura.obstacles.TagsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::vutura::obstacles::Obstacle > obstacles_;
  mutable int _cached_size_;
  friend struct  protobuf_lora_2dobstacles_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Obstacle_Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vutura.obstacles.Obstacle.Position) */ {
 public:
  Obstacle_Position();
  virtual ~Obstacle_Position();

  Obstacle_Position(const Obstacle_Position& from);

  inline Obstacle_Position& operator=(const Obstacle_Position& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Obstacle_Position& default_instance();

  static inline const Obstacle_Position* internal_default_instance() {
    return reinterpret_cast<const Obstacle_Position*>(
               &_Obstacle_Position_default_instance_);
  }

  void Swap(Obstacle_Position* other);

  // implements Message ----------------------------------------------

  inline Obstacle_Position* New() const PROTOBUF_FINAL { return New(NULL); }

  Obstacle_Position* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Obstacle_Position& from);
  void MergeFrom(const Obstacle_Position& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Obstacle_Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float latitude = 1;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  float latitude() const;
  void set_latitude(float value);

  // float longitude = 2;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  float longitude() const;
  void set_longitude(float value);

  // float altitude = 3;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  float altitude() const;
  void set_altitude(float value);

  // @@protoc_insertion_point(class_scope:vutura.obstacles.Obstacle.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float latitude_;
  float longitude_;
  float altitude_;
  mutable int _cached_size_;
  friend struct  protobuf_lora_2dobstacles_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Obstacle_Fence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vutura.obstacles.Obstacle.Fence) */ {
 public:
  Obstacle_Fence();
  virtual ~Obstacle_Fence();

  Obstacle_Fence(const Obstacle_Fence& from);

  inline Obstacle_Fence& operator=(const Obstacle_Fence& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Obstacle_Fence& default_instance();

  static inline const Obstacle_Fence* internal_default_instance() {
    return reinterpret_cast<const Obstacle_Fence*>(
               &_Obstacle_Fence_default_instance_);
  }

  void Swap(Obstacle_Fence* other);

  // implements Message ----------------------------------------------

  inline Obstacle_Fence* New() const PROTOBUF_FINAL { return New(NULL); }

  Obstacle_Fence* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Obstacle_Fence& from);
  void MergeFrom(const Obstacle_Fence& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Obstacle_Fence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 radius = 1;
  void clear_radius();
  static const int kRadiusFieldNumber = 1;
  ::google::protobuf::uint32 radius() const;
  void set_radius(::google::protobuf::uint32 value);

  // uint32 min = 2;
  void clear_min();
  static const int kMinFieldNumber = 2;
  ::google::protobuf::uint32 min() const;
  void set_min(::google::protobuf::uint32 value);

  // uint32 max = 3;
  void clear_max();
  static const int kMaxFieldNumber = 3;
  ::google::protobuf::uint32 max() const;
  void set_max(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:vutura.obstacles.Obstacle.Fence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 radius_;
  ::google::protobuf::uint32 min_;
  ::google::protobuf::uint32 max_;
  mutable int _cached_size_;
  friend struct  protobuf_lora_2dobstacles_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Obstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vutura.obstacles.Obstacle) */ {
 public:
  Obstacle();
  virtual ~Obstacle();

  Obstacle(const Obstacle& from);

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Obstacle& default_instance();

  static inline const Obstacle* internal_default_instance() {
    return reinterpret_cast<const Obstacle*>(
               &_Obstacle_default_instance_);
  }

  void Swap(Obstacle* other);

  // implements Message ----------------------------------------------

  inline Obstacle* New() const PROTOBUF_FINAL { return New(NULL); }

  Obstacle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Obstacle& from);
  void MergeFrom(const Obstacle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Obstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Obstacle_Position Position;
  typedef Obstacle_Fence Fence;

  typedef Obstacle_Type Type;
  static const Type FIRE_FIGHTER =
    Obstacle_Type_FIRE_FIGHTER;
  static const Type FIRE_TRUCK =
    Obstacle_Type_FIRE_TRUCK;
  static inline bool Type_IsValid(int value) {
    return Obstacle_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Obstacle_Type_Type_MIN;
  static const Type Type_MAX =
    Obstacle_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Obstacle_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Obstacle_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Obstacle_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Obstacle_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .vutura.obstacles.Obstacle.Position position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  const ::vutura::obstacles::Obstacle_Position& position() const;
  ::vutura::obstacles::Obstacle_Position* mutable_position();
  ::vutura::obstacles::Obstacle_Position* release_position();
  void set_allocated_position(::vutura::obstacles::Obstacle_Position* position);

  // .vutura.obstacles.Obstacle.Fence fence = 4;
  bool has_fence() const;
  void clear_fence();
  static const int kFenceFieldNumber = 4;
  const ::vutura::obstacles::Obstacle_Fence& fence() const;
  ::vutura::obstacles::Obstacle_Fence* mutable_fence();
  ::vutura::obstacles::Obstacle_Fence* release_fence();
  void set_allocated_fence(::vutura::obstacles::Obstacle_Fence* fence);

  // uint32 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .vutura.obstacles.Obstacle.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::vutura::obstacles::Obstacle_Type type() const;
  void set_type(::vutura::obstacles::Obstacle_Type value);

  // @@protoc_insertion_point(class_scope:vutura.obstacles.Obstacle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::vutura::obstacles::Obstacle_Position* position_;
  ::vutura::obstacles::Obstacle_Fence* fence_;
  ::google::protobuf::uint32 id_;
  int type_;
  mutable int _cached_size_;
  friend struct  protobuf_lora_2dobstacles_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CollisionWarning : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vutura.obstacles.CollisionWarning) */ {
 public:
  CollisionWarning();
  virtual ~CollisionWarning();

  CollisionWarning(const CollisionWarning& from);

  inline CollisionWarning& operator=(const CollisionWarning& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollisionWarning& default_instance();

  static inline const CollisionWarning* internal_default_instance() {
    return reinterpret_cast<const CollisionWarning*>(
               &_CollisionWarning_default_instance_);
  }

  void Swap(CollisionWarning* other);

  // implements Message ----------------------------------------------

  inline CollisionWarning* New() const PROTOBUF_FINAL { return New(NULL); }

  CollisionWarning* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CollisionWarning& from);
  void MergeFrom(const CollisionWarning& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CollisionWarning* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // uint32 ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // float distance = 3;
  void clear_distance();
  static const int kDistanceFieldNumber = 3;
  float distance() const;
  void set_distance(float value);

  // @@protoc_insertion_point(class_scope:vutura.obstacles.CollisionWarning)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 id_;
  float distance_;
  mutable int _cached_size_;
  friend struct  protobuf_lora_2dobstacles_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CollisionWarnings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vutura.obstacles.CollisionWarnings) */ {
 public:
  CollisionWarnings();
  virtual ~CollisionWarnings();

  CollisionWarnings(const CollisionWarnings& from);

  inline CollisionWarnings& operator=(const CollisionWarnings& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollisionWarnings& default_instance();

  static inline const CollisionWarnings* internal_default_instance() {
    return reinterpret_cast<const CollisionWarnings*>(
               &_CollisionWarnings_default_instance_);
  }

  void Swap(CollisionWarnings* other);

  // implements Message ----------------------------------------------

  inline CollisionWarnings* New() const PROTOBUF_FINAL { return New(NULL); }

  CollisionWarnings* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CollisionWarnings& from);
  void MergeFrom(const CollisionWarnings& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CollisionWarnings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vutura.obstacles.CollisionWarning warningList = 1;
  int warninglist_size() const;
  void clear_warninglist();
  static const int kWarningListFieldNumber = 1;
  const ::vutura::obstacles::CollisionWarning& warninglist(int index) const;
  ::vutura::obstacles::CollisionWarning* mutable_warninglist(int index);
  ::vutura::obstacles::CollisionWarning* add_warninglist();
  ::google::protobuf::RepeatedPtrField< ::vutura::obstacles::CollisionWarning >*
      mutable_warninglist();
  const ::google::protobuf::RepeatedPtrField< ::vutura::obstacles::CollisionWarning >&
      warninglist() const;

  // @@protoc_insertion_point(class_scope:vutura.obstacles.CollisionWarnings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::vutura::obstacles::CollisionWarning > warninglist_;
  mutable int _cached_size_;
  friend struct  protobuf_lora_2dobstacles_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TagsResponse

// repeated .vutura.obstacles.Obstacle obstacles = 1;
inline int TagsResponse::obstacles_size() const {
  return obstacles_.size();
}
inline void TagsResponse::clear_obstacles() {
  obstacles_.Clear();
}
inline const ::vutura::obstacles::Obstacle& TagsResponse::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:vutura.obstacles.TagsResponse.obstacles)
  return obstacles_.Get(index);
}
inline ::vutura::obstacles::Obstacle* TagsResponse::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:vutura.obstacles.TagsResponse.obstacles)
  return obstacles_.Mutable(index);
}
inline ::vutura::obstacles::Obstacle* TagsResponse::add_obstacles() {
  // @@protoc_insertion_point(field_add:vutura.obstacles.TagsResponse.obstacles)
  return obstacles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vutura::obstacles::Obstacle >*
TagsResponse::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:vutura.obstacles.TagsResponse.obstacles)
  return &obstacles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vutura::obstacles::Obstacle >&
TagsResponse::obstacles() const {
  // @@protoc_insertion_point(field_list:vutura.obstacles.TagsResponse.obstacles)
  return obstacles_;
}

// -------------------------------------------------------------------

// Obstacle_Position

// float latitude = 1;
inline void Obstacle_Position::clear_latitude() {
  latitude_ = 0;
}
inline float Obstacle_Position::latitude() const {
  // @@protoc_insertion_point(field_get:vutura.obstacles.Obstacle.Position.latitude)
  return latitude_;
}
inline void Obstacle_Position::set_latitude(float value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:vutura.obstacles.Obstacle.Position.latitude)
}

// float longitude = 2;
inline void Obstacle_Position::clear_longitude() {
  longitude_ = 0;
}
inline float Obstacle_Position::longitude() const {
  // @@protoc_insertion_point(field_get:vutura.obstacles.Obstacle.Position.longitude)
  return longitude_;
}
inline void Obstacle_Position::set_longitude(float value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:vutura.obstacles.Obstacle.Position.longitude)
}

// float altitude = 3;
inline void Obstacle_Position::clear_altitude() {
  altitude_ = 0;
}
inline float Obstacle_Position::altitude() const {
  // @@protoc_insertion_point(field_get:vutura.obstacles.Obstacle.Position.altitude)
  return altitude_;
}
inline void Obstacle_Position::set_altitude(float value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:vutura.obstacles.Obstacle.Position.altitude)
}

// -------------------------------------------------------------------

// Obstacle_Fence

// uint32 radius = 1;
inline void Obstacle_Fence::clear_radius() {
  radius_ = 0u;
}
inline ::google::protobuf::uint32 Obstacle_Fence::radius() const {
  // @@protoc_insertion_point(field_get:vutura.obstacles.Obstacle.Fence.radius)
  return radius_;
}
inline void Obstacle_Fence::set_radius(::google::protobuf::uint32 value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:vutura.obstacles.Obstacle.Fence.radius)
}

// uint32 min = 2;
inline void Obstacle_Fence::clear_min() {
  min_ = 0u;
}
inline ::google::protobuf::uint32 Obstacle_Fence::min() const {
  // @@protoc_insertion_point(field_get:vutura.obstacles.Obstacle.Fence.min)
  return min_;
}
inline void Obstacle_Fence::set_min(::google::protobuf::uint32 value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:vutura.obstacles.Obstacle.Fence.min)
}

// uint32 max = 3;
inline void Obstacle_Fence::clear_max() {
  max_ = 0u;
}
inline ::google::protobuf::uint32 Obstacle_Fence::max() const {
  // @@protoc_insertion_point(field_get:vutura.obstacles.Obstacle.Fence.max)
  return max_;
}
inline void Obstacle_Fence::set_max(::google::protobuf::uint32 value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:vutura.obstacles.Obstacle.Fence.max)
}

// -------------------------------------------------------------------

// Obstacle

// uint32 ID = 1;
inline void Obstacle::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Obstacle::id() const {
  // @@protoc_insertion_point(field_get:vutura.obstacles.Obstacle.ID)
  return id_;
}
inline void Obstacle::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:vutura.obstacles.Obstacle.ID)
}

// .vutura.obstacles.Obstacle.Type type = 2;
inline void Obstacle::clear_type() {
  type_ = 0;
}
inline ::vutura::obstacles::Obstacle_Type Obstacle::type() const {
  // @@protoc_insertion_point(field_get:vutura.obstacles.Obstacle.type)
  return static_cast< ::vutura::obstacles::Obstacle_Type >(type_);
}
inline void Obstacle::set_type(::vutura::obstacles::Obstacle_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:vutura.obstacles.Obstacle.type)
}

// .vutura.obstacles.Obstacle.Position position = 3;
inline bool Obstacle::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void Obstacle::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::vutura::obstacles::Obstacle_Position& Obstacle::position() const {
  // @@protoc_insertion_point(field_get:vutura.obstacles.Obstacle.position)
  return position_ != NULL ? *position_
                         : *::vutura::obstacles::Obstacle_Position::internal_default_instance();
}
inline ::vutura::obstacles::Obstacle_Position* Obstacle::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::vutura::obstacles::Obstacle_Position;
  }
  // @@protoc_insertion_point(field_mutable:vutura.obstacles.Obstacle.position)
  return position_;
}
inline ::vutura::obstacles::Obstacle_Position* Obstacle::release_position() {
  // @@protoc_insertion_point(field_release:vutura.obstacles.Obstacle.position)
  
  ::vutura::obstacles::Obstacle_Position* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_position(::vutura::obstacles::Obstacle_Position* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vutura.obstacles.Obstacle.position)
}

// .vutura.obstacles.Obstacle.Fence fence = 4;
inline bool Obstacle::has_fence() const {
  return this != internal_default_instance() && fence_ != NULL;
}
inline void Obstacle::clear_fence() {
  if (GetArenaNoVirtual() == NULL && fence_ != NULL) delete fence_;
  fence_ = NULL;
}
inline const ::vutura::obstacles::Obstacle_Fence& Obstacle::fence() const {
  // @@protoc_insertion_point(field_get:vutura.obstacles.Obstacle.fence)
  return fence_ != NULL ? *fence_
                         : *::vutura::obstacles::Obstacle_Fence::internal_default_instance();
}
inline ::vutura::obstacles::Obstacle_Fence* Obstacle::mutable_fence() {
  
  if (fence_ == NULL) {
    fence_ = new ::vutura::obstacles::Obstacle_Fence;
  }
  // @@protoc_insertion_point(field_mutable:vutura.obstacles.Obstacle.fence)
  return fence_;
}
inline ::vutura::obstacles::Obstacle_Fence* Obstacle::release_fence() {
  // @@protoc_insertion_point(field_release:vutura.obstacles.Obstacle.fence)
  
  ::vutura::obstacles::Obstacle_Fence* temp = fence_;
  fence_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_fence(::vutura::obstacles::Obstacle_Fence* fence) {
  delete fence_;
  fence_ = fence;
  if (fence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:vutura.obstacles.Obstacle.fence)
}

// -------------------------------------------------------------------

// CollisionWarning

// uint64 timestamp = 1;
inline void CollisionWarning::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CollisionWarning::timestamp() const {
  // @@protoc_insertion_point(field_get:vutura.obstacles.CollisionWarning.timestamp)
  return timestamp_;
}
inline void CollisionWarning::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:vutura.obstacles.CollisionWarning.timestamp)
}

// uint32 ID = 2;
inline void CollisionWarning::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 CollisionWarning::id() const {
  // @@protoc_insertion_point(field_get:vutura.obstacles.CollisionWarning.ID)
  return id_;
}
inline void CollisionWarning::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:vutura.obstacles.CollisionWarning.ID)
}

// float distance = 3;
inline void CollisionWarning::clear_distance() {
  distance_ = 0;
}
inline float CollisionWarning::distance() const {
  // @@protoc_insertion_point(field_get:vutura.obstacles.CollisionWarning.distance)
  return distance_;
}
inline void CollisionWarning::set_distance(float value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:vutura.obstacles.CollisionWarning.distance)
}

// -------------------------------------------------------------------

// CollisionWarnings

// repeated .vutura.obstacles.CollisionWarning warningList = 1;
inline int CollisionWarnings::warninglist_size() const {
  return warninglist_.size();
}
inline void CollisionWarnings::clear_warninglist() {
  warninglist_.Clear();
}
inline const ::vutura::obstacles::CollisionWarning& CollisionWarnings::warninglist(int index) const {
  // @@protoc_insertion_point(field_get:vutura.obstacles.CollisionWarnings.warningList)
  return warninglist_.Get(index);
}
inline ::vutura::obstacles::CollisionWarning* CollisionWarnings::mutable_warninglist(int index) {
  // @@protoc_insertion_point(field_mutable:vutura.obstacles.CollisionWarnings.warningList)
  return warninglist_.Mutable(index);
}
inline ::vutura::obstacles::CollisionWarning* CollisionWarnings::add_warninglist() {
  // @@protoc_insertion_point(field_add:vutura.obstacles.CollisionWarnings.warningList)
  return warninglist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::vutura::obstacles::CollisionWarning >*
CollisionWarnings::mutable_warninglist() {
  // @@protoc_insertion_point(field_mutable_list:vutura.obstacles.CollisionWarnings.warningList)
  return &warninglist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::vutura::obstacles::CollisionWarning >&
CollisionWarnings::warninglist() const {
  // @@protoc_insertion_point(field_list:vutura.obstacles.CollisionWarnings.warningList)
  return warninglist_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace obstacles
}  // namespace vutura

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::vutura::obstacles::Obstacle_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vutura::obstacles::Obstacle_Type>() {
  return ::vutura::obstacles::Obstacle_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lora_2dobstacles_2eproto__INCLUDED
