// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lora-obstacles.proto

#include "lora-obstacles.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_lora_2dobstacles_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CollisionWarning_lora_2dobstacles_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lora_2dobstacles_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Obstacle_Fence_lora_2dobstacles_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lora_2dobstacles_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Obstacle_Position_lora_2dobstacles_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lora_2dobstacles_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Obstacle_lora_2dobstacles_2eproto;
namespace vutura {
namespace obstacles {
class EmptyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Empty> _instance;
} _Empty_default_instance_;
class TagsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TagsResponse> _instance;
} _TagsResponse_default_instance_;
class Obstacle_PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Obstacle_Position> _instance;
} _Obstacle_Position_default_instance_;
class Obstacle_FenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Obstacle_Fence> _instance;
} _Obstacle_Fence_default_instance_;
class ObstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Obstacle> _instance;
} _Obstacle_default_instance_;
class CollisionWarningDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CollisionWarning> _instance;
} _CollisionWarning_default_instance_;
class CollisionWarningsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CollisionWarnings> _instance;
} _CollisionWarnings_default_instance_;
}  // namespace obstacles
}  // namespace vutura
static void InitDefaultsEmpty_lora_2dobstacles_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vutura::obstacles::_Empty_default_instance_;
    new (ptr) ::vutura::obstacles::Empty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vutura::obstacles::Empty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Empty_lora_2dobstacles_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEmpty_lora_2dobstacles_2eproto}, {}};

static void InitDefaultsTagsResponse_lora_2dobstacles_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vutura::obstacles::_TagsResponse_default_instance_;
    new (ptr) ::vutura::obstacles::TagsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vutura::obstacles::TagsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TagsResponse_lora_2dobstacles_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTagsResponse_lora_2dobstacles_2eproto}, {
      &scc_info_Obstacle_lora_2dobstacles_2eproto.base,}};

static void InitDefaultsObstacle_Position_lora_2dobstacles_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vutura::obstacles::_Obstacle_Position_default_instance_;
    new (ptr) ::vutura::obstacles::Obstacle_Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vutura::obstacles::Obstacle_Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Obstacle_Position_lora_2dobstacles_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObstacle_Position_lora_2dobstacles_2eproto}, {}};

static void InitDefaultsObstacle_Fence_lora_2dobstacles_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vutura::obstacles::_Obstacle_Fence_default_instance_;
    new (ptr) ::vutura::obstacles::Obstacle_Fence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vutura::obstacles::Obstacle_Fence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Obstacle_Fence_lora_2dobstacles_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObstacle_Fence_lora_2dobstacles_2eproto}, {}};

static void InitDefaultsObstacle_lora_2dobstacles_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vutura::obstacles::_Obstacle_default_instance_;
    new (ptr) ::vutura::obstacles::Obstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vutura::obstacles::Obstacle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Obstacle_lora_2dobstacles_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsObstacle_lora_2dobstacles_2eproto}, {
      &scc_info_Obstacle_Position_lora_2dobstacles_2eproto.base,
      &scc_info_Obstacle_Fence_lora_2dobstacles_2eproto.base,}};

static void InitDefaultsCollisionWarning_lora_2dobstacles_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vutura::obstacles::_CollisionWarning_default_instance_;
    new (ptr) ::vutura::obstacles::CollisionWarning();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vutura::obstacles::CollisionWarning::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CollisionWarning_lora_2dobstacles_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCollisionWarning_lora_2dobstacles_2eproto}, {}};

static void InitDefaultsCollisionWarnings_lora_2dobstacles_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vutura::obstacles::_CollisionWarnings_default_instance_;
    new (ptr) ::vutura::obstacles::CollisionWarnings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vutura::obstacles::CollisionWarnings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CollisionWarnings_lora_2dobstacles_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCollisionWarnings_lora_2dobstacles_2eproto}, {
      &scc_info_CollisionWarning_lora_2dobstacles_2eproto.base,}};

void InitDefaults_lora_2dobstacles_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Empty_lora_2dobstacles_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TagsResponse_lora_2dobstacles_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Obstacle_Position_lora_2dobstacles_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Obstacle_Fence_lora_2dobstacles_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Obstacle_lora_2dobstacles_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CollisionWarning_lora_2dobstacles_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CollisionWarnings_lora_2dobstacles_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_lora_2dobstacles_2eproto[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_lora_2dobstacles_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_lora_2dobstacles_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_lora_2dobstacles_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::TagsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::TagsResponse, obstacles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::Obstacle_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::Obstacle_Position, latitude_),
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::Obstacle_Position, longitude_),
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::Obstacle_Position, altitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::Obstacle_Fence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::Obstacle_Fence, radius_),
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::Obstacle_Fence, min_),
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::Obstacle_Fence, max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::Obstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::Obstacle, id_),
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::Obstacle, type_),
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::Obstacle, position_),
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::Obstacle, fence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::CollisionWarning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::CollisionWarning, timestamp_),
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::CollisionWarning, id_),
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::CollisionWarning, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::CollisionWarnings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vutura::obstacles::CollisionWarnings, warninglist_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vutura::obstacles::Empty)},
  { 5, -1, sizeof(::vutura::obstacles::TagsResponse)},
  { 11, -1, sizeof(::vutura::obstacles::Obstacle_Position)},
  { 19, -1, sizeof(::vutura::obstacles::Obstacle_Fence)},
  { 27, -1, sizeof(::vutura::obstacles::Obstacle)},
  { 36, -1, sizeof(::vutura::obstacles::CollisionWarning)},
  { 44, -1, sizeof(::vutura::obstacles::CollisionWarnings)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::vutura::obstacles::_Empty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vutura::obstacles::_TagsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vutura::obstacles::_Obstacle_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vutura::obstacles::_Obstacle_Fence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vutura::obstacles::_Obstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vutura::obstacles::_CollisionWarning_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vutura::obstacles::_CollisionWarnings_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_lora_2dobstacles_2eproto = {
  {}, AddDescriptors_lora_2dobstacles_2eproto, "lora-obstacles.proto", schemas,
  file_default_instances, TableStruct_lora_2dobstacles_2eproto::offsets,
  file_level_metadata_lora_2dobstacles_2eproto, 7, file_level_enum_descriptors_lora_2dobstacles_2eproto, file_level_service_descriptors_lora_2dobstacles_2eproto,
};

const char descriptor_table_protodef_lora_2dobstacles_2eproto[] =
  "\n\024lora-obstacles.proto\022\020vutura.obstacles"
  "\"\007\n\005Empty\"=\n\014TagsResponse\022-\n\tobstacles\030\001"
  " \003(\0132\032.vutura.obstacles.Obstacle\"\212\003\n\010Obs"
  "tacle\022\n\n\002ID\030\001 \001(\r\022-\n\004type\030\002 \001(\0162\037.vutura"
  ".obstacles.Obstacle.Type\0225\n\010position\030\003 \001"
  "(\0132#.vutura.obstacles.Obstacle.Position\022"
  "/\n\005fence\030\004 \001(\0132 .vutura.obstacles.Obstac"
  "le.Fence\032A\n\010Position\022\020\n\010latitude\030\001 \001(\002\022\021"
  "\n\tlongitude\030\002 \001(\002\022\020\n\010altitude\030\003 \001(\002\0321\n\005F"
  "ence\022\016\n\006radius\030\001 \001(\r\022\013\n\003min\030\002 \001(\r\022\013\n\003max"
  "\030\003 \001(\r\"e\n\004Type\022\027\n\023UNIDENTIFIED_OBJECT\020\000\022"
  "\020\n\014FIRE_FIGHTER\020\001\022\016\n\nFIRE_TRUCK\020\002\022\014\n\010FIR"
  "E_UAV\020\003\022\024\n\020UNIDENTIFIED_UAV\020\004\"C\n\020Collisi"
  "onWarning\022\021\n\ttimestamp\030\001 \001(\004\022\n\n\002ID\030\002 \001(\r"
  "\022\020\n\010distance\030\003 \001(\002\"L\n\021CollisionWarnings\022"
  "7\n\013warningList\030\001 \003(\0132\".vutura.obstacles."
  "CollisionWarning2\250\002\n\013TagsService\022B\n\007GetT"
  "ags\022\027.vutura.obstacles.Empty\032\036.vutura.ob"
  "stacles.TagsResponse\022=\n\006SetTag\022\032.vutura."
  "obstacles.Obstacle\032\027.vutura.obstacles.Em"
  "pty\022K\n\013GetWarnings\022\027.vutura.obstacles.Em"
  "pty\032#.vutura.obstacles.CollisionWarnings"
  "\022I\n\nSetWarning\022\".vutura.obstacles.Collis"
  "ionWarning\032\027.vutura.obstacles.Emptyb\006pro"
  "to3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_lora_2dobstacles_2eproto = {
  false, InitDefaults_lora_2dobstacles_2eproto, 
  descriptor_table_protodef_lora_2dobstacles_2eproto,
  "lora-obstacles.proto", &assign_descriptors_table_lora_2dobstacles_2eproto, 963,
};

void AddDescriptors_lora_2dobstacles_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_lora_2dobstacles_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lora_2dobstacles_2eproto = []() { AddDescriptors_lora_2dobstacles_2eproto(); return true; }();
namespace vutura {
namespace obstacles {
const ::google::protobuf::EnumDescriptor* Obstacle_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_lora_2dobstacles_2eproto);
  return file_level_enum_descriptors_lora_2dobstacles_2eproto[0];
}
bool Obstacle_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Obstacle_Type Obstacle::UNIDENTIFIED_OBJECT;
const Obstacle_Type Obstacle::FIRE_FIGHTER;
const Obstacle_Type Obstacle::FIRE_TRUCK;
const Obstacle_Type Obstacle::FIRE_UAV;
const Obstacle_Type Obstacle::UNIDENTIFIED_UAV;
const Obstacle_Type Obstacle::Type_MIN;
const Obstacle_Type Obstacle::Type_MAX;
const int Obstacle::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Empty::InitAsDefaultInstance() {
}
class Empty::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vutura.obstacles.Empty)
}
Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vutura.obstacles.Empty)
}

void Empty::SharedCtor() {
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:vutura.obstacles.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Empty& Empty::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Empty_lora_2dobstacles_2eproto.base);
  return *internal_default_instance();
}


void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:vutura.obstacles.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Empty::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Empty*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vutura.obstacles.Empty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:vutura.obstacles.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vutura.obstacles.Empty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vutura.obstacles.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vutura.obstacles.Empty)
}

::google::protobuf::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vutura.obstacles.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vutura.obstacles.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vutura.obstacles.Empty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vutura.obstacles.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::google::protobuf::DynamicCastToGenerated<Empty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vutura.obstacles.Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vutura.obstacles.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vutura.obstacles.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vutura.obstacles.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vutura.obstacles.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lora_2dobstacles_2eproto);
  return ::file_level_metadata_lora_2dobstacles_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TagsResponse::InitAsDefaultInstance() {
}
class TagsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TagsResponse::kObstaclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TagsResponse::TagsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vutura.obstacles.TagsResponse)
}
TagsResponse::TagsResponse(const TagsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      obstacles_(from.obstacles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vutura.obstacles.TagsResponse)
}

void TagsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TagsResponse_lora_2dobstacles_2eproto.base);
}

TagsResponse::~TagsResponse() {
  // @@protoc_insertion_point(destructor:vutura.obstacles.TagsResponse)
  SharedDtor();
}

void TagsResponse::SharedDtor() {
}

void TagsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TagsResponse& TagsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TagsResponse_lora_2dobstacles_2eproto.base);
  return *internal_default_instance();
}


void TagsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vutura.obstacles.TagsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TagsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TagsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vutura.obstacles.Obstacle obstacles = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vutura::obstacles::Obstacle::_InternalParse;
          object = msg->add_obstacles();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TagsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vutura.obstacles.TagsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vutura.obstacles.Obstacle obstacles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vutura.obstacles.TagsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vutura.obstacles.TagsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TagsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vutura.obstacles.TagsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vutura.obstacles.Obstacle obstacles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->obstacles(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vutura.obstacles.TagsResponse)
}

::google::protobuf::uint8* TagsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vutura.obstacles.TagsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vutura.obstacles.Obstacle obstacles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->obstacles(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vutura.obstacles.TagsResponse)
  return target;
}

size_t TagsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vutura.obstacles.TagsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vutura.obstacles.Obstacle obstacles = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obstacles(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TagsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vutura.obstacles.TagsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TagsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<TagsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vutura.obstacles.TagsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vutura.obstacles.TagsResponse)
    MergeFrom(*source);
  }
}

void TagsResponse::MergeFrom(const TagsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vutura.obstacles.TagsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_.MergeFrom(from.obstacles_);
}

void TagsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vutura.obstacles.TagsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagsResponse::CopyFrom(const TagsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vutura.obstacles.TagsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagsResponse::IsInitialized() const {
  return true;
}

void TagsResponse::Swap(TagsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TagsResponse::InternalSwap(TagsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&obstacles_)->InternalSwap(CastToBase(&other->obstacles_));
}

::google::protobuf::Metadata TagsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lora_2dobstacles_2eproto);
  return ::file_level_metadata_lora_2dobstacles_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Obstacle_Position::InitAsDefaultInstance() {
}
class Obstacle_Position::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Obstacle_Position::kLatitudeFieldNumber;
const int Obstacle_Position::kLongitudeFieldNumber;
const int Obstacle_Position::kAltitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Obstacle_Position::Obstacle_Position()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vutura.obstacles.Obstacle.Position)
}
Obstacle_Position::Obstacle_Position(const Obstacle_Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:vutura.obstacles.Obstacle.Position)
}

void Obstacle_Position::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
}

Obstacle_Position::~Obstacle_Position() {
  // @@protoc_insertion_point(destructor:vutura.obstacles.Obstacle.Position)
  SharedDtor();
}

void Obstacle_Position::SharedDtor() {
}

void Obstacle_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obstacle_Position& Obstacle_Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Obstacle_Position_lora_2dobstacles_2eproto.base);
  return *internal_default_instance();
}


void Obstacle_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:vutura.obstacles.Obstacle.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Obstacle_Position::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Obstacle_Position*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float latitude = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_latitude(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float longitude = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_longitude(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float altitude = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_altitude(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Obstacle_Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vutura.obstacles.Obstacle.Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vutura.obstacles.Obstacle.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vutura.obstacles.Obstacle.Position)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Obstacle_Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vutura.obstacles.Obstacle.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float latitude = 1;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->latitude(), output);
  }

  // float longitude = 2;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  // float altitude = 3;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->altitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vutura.obstacles.Obstacle.Position)
}

::google::protobuf::uint8* Obstacle_Position::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vutura.obstacles.Obstacle.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float latitude = 1;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->latitude(), target);
  }

  // float longitude = 2;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  // float altitude = 3;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->altitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vutura.obstacles.Obstacle.Position)
  return target;
}

size_t Obstacle_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vutura.obstacles.Obstacle.Position)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float latitude = 1;
  if (this->latitude() != 0) {
    total_size += 1 + 4;
  }

  // float longitude = 2;
  if (this->longitude() != 0) {
    total_size += 1 + 4;
  }

  // float altitude = 3;
  if (this->altitude() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacle_Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vutura.obstacles.Obstacle.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacle_Position* source =
      ::google::protobuf::DynamicCastToGenerated<Obstacle_Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vutura.obstacles.Obstacle.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vutura.obstacles.Obstacle.Position)
    MergeFrom(*source);
  }
}

void Obstacle_Position::MergeFrom(const Obstacle_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vutura.obstacles.Obstacle.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
}

void Obstacle_Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vutura.obstacles.Obstacle.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle_Position::CopyFrom(const Obstacle_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vutura.obstacles.Obstacle.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle_Position::IsInitialized() const {
  return true;
}

void Obstacle_Position::Swap(Obstacle_Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Obstacle_Position::InternalSwap(Obstacle_Position* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(altitude_, other->altitude_);
}

::google::protobuf::Metadata Obstacle_Position::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lora_2dobstacles_2eproto);
  return ::file_level_metadata_lora_2dobstacles_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Obstacle_Fence::InitAsDefaultInstance() {
}
class Obstacle_Fence::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Obstacle_Fence::kRadiusFieldNumber;
const int Obstacle_Fence::kMinFieldNumber;
const int Obstacle_Fence::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Obstacle_Fence::Obstacle_Fence()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vutura.obstacles.Obstacle.Fence)
}
Obstacle_Fence::Obstacle_Fence(const Obstacle_Fence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:vutura.obstacles.Obstacle.Fence)
}

void Obstacle_Fence::SharedCtor() {
  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(max_));
}

Obstacle_Fence::~Obstacle_Fence() {
  // @@protoc_insertion_point(destructor:vutura.obstacles.Obstacle.Fence)
  SharedDtor();
}

void Obstacle_Fence::SharedDtor() {
}

void Obstacle_Fence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obstacle_Fence& Obstacle_Fence::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Obstacle_Fence_lora_2dobstacles_2eproto.base);
  return *internal_default_instance();
}


void Obstacle_Fence::Clear() {
// @@protoc_insertion_point(message_clear_start:vutura.obstacles.Obstacle.Fence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(max_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Obstacle_Fence::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Obstacle_Fence*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 radius = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_radius(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 min = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_min(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 max = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_max(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Obstacle_Fence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vutura.obstacles.Obstacle.Fence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 radius = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vutura.obstacles.Obstacle.Fence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vutura.obstacles.Obstacle.Fence)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Obstacle_Fence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vutura.obstacles.Obstacle.Fence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 radius = 1;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->radius(), output);
  }

  // uint32 min = 2;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min(), output);
  }

  // uint32 max = 3;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vutura.obstacles.Obstacle.Fence)
}

::google::protobuf::uint8* Obstacle_Fence::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vutura.obstacles.Obstacle.Fence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 radius = 1;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->radius(), target);
  }

  // uint32 min = 2;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min(), target);
  }

  // uint32 max = 3;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vutura.obstacles.Obstacle.Fence)
  return target;
}

size_t Obstacle_Fence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vutura.obstacles.Obstacle.Fence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 radius = 1;
  if (this->radius() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->radius());
  }

  // uint32 min = 2;
  if (this->min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min());
  }

  // uint32 max = 3;
  if (this->max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacle_Fence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vutura.obstacles.Obstacle.Fence)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacle_Fence* source =
      ::google::protobuf::DynamicCastToGenerated<Obstacle_Fence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vutura.obstacles.Obstacle.Fence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vutura.obstacles.Obstacle.Fence)
    MergeFrom(*source);
  }
}

void Obstacle_Fence::MergeFrom(const Obstacle_Fence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vutura.obstacles.Obstacle.Fence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
}

void Obstacle_Fence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vutura.obstacles.Obstacle.Fence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle_Fence::CopyFrom(const Obstacle_Fence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vutura.obstacles.Obstacle.Fence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle_Fence::IsInitialized() const {
  return true;
}

void Obstacle_Fence::Swap(Obstacle_Fence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Obstacle_Fence::InternalSwap(Obstacle_Fence* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(radius_, other->radius_);
  swap(min_, other->min_);
  swap(max_, other->max_);
}

::google::protobuf::Metadata Obstacle_Fence::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lora_2dobstacles_2eproto);
  return ::file_level_metadata_lora_2dobstacles_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Obstacle::InitAsDefaultInstance() {
  ::vutura::obstacles::_Obstacle_default_instance_._instance.get_mutable()->position_ = const_cast< ::vutura::obstacles::Obstacle_Position*>(
      ::vutura::obstacles::Obstacle_Position::internal_default_instance());
  ::vutura::obstacles::_Obstacle_default_instance_._instance.get_mutable()->fence_ = const_cast< ::vutura::obstacles::Obstacle_Fence*>(
      ::vutura::obstacles::Obstacle_Fence::internal_default_instance());
}
class Obstacle::HasBitSetters {
 public:
  static const ::vutura::obstacles::Obstacle_Position& position(const Obstacle* msg);
  static const ::vutura::obstacles::Obstacle_Fence& fence(const Obstacle* msg);
};

const ::vutura::obstacles::Obstacle_Position&
Obstacle::HasBitSetters::position(const Obstacle* msg) {
  return *msg->position_;
}
const ::vutura::obstacles::Obstacle_Fence&
Obstacle::HasBitSetters::fence(const Obstacle* msg) {
  return *msg->fence_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Obstacle::kIDFieldNumber;
const int Obstacle::kTypeFieldNumber;
const int Obstacle::kPositionFieldNumber;
const int Obstacle::kFenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Obstacle::Obstacle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vutura.obstacles.Obstacle)
}
Obstacle::Obstacle(const Obstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::vutura::obstacles::Obstacle_Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_fence()) {
    fence_ = new ::vutura::obstacles::Obstacle_Fence(*from.fence_);
  } else {
    fence_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:vutura.obstacles.Obstacle)
}

void Obstacle::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Obstacle_lora_2dobstacles_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&position_)) + sizeof(type_));
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:vutura.obstacles.Obstacle)
  SharedDtor();
}

void Obstacle::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete fence_;
}

void Obstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obstacle& Obstacle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Obstacle_lora_2dobstacles_2eproto.base);
  return *internal_default_instance();
}


void Obstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:vutura.obstacles.Obstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fence_ != nullptr) {
    delete fence_;
  }
  fence_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Obstacle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Obstacle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vutura.obstacles.Obstacle.Type type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::vutura::obstacles::Obstacle_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vutura.obstacles.Obstacle.Position position = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vutura::obstacles::Obstacle_Position::_InternalParse;
        object = msg->mutable_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vutura.obstacles.Obstacle.Fence fence = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vutura::obstacles::Obstacle_Fence::_InternalParse;
        object = msg->mutable_fence();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Obstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vutura.obstacles.Obstacle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vutura.obstacles.Obstacle.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::vutura::obstacles::Obstacle_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vutura.obstacles.Obstacle.Position position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vutura.obstacles.Obstacle.Fence fence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vutura.obstacles.Obstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vutura.obstacles.Obstacle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Obstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vutura.obstacles.Obstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // .vutura.obstacles.Obstacle.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .vutura.obstacles.Obstacle.Position position = 3;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::position(this), output);
  }

  // .vutura.obstacles.Obstacle.Fence fence = 4;
  if (this->has_fence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::fence(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vutura.obstacles.Obstacle)
}

::google::protobuf::uint8* Obstacle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vutura.obstacles.Obstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // .vutura.obstacles.Obstacle.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .vutura.obstacles.Obstacle.Position position = 3;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::position(this), target);
  }

  // .vutura.obstacles.Obstacle.Fence fence = 4;
  if (this->has_fence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::fence(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vutura.obstacles.Obstacle)
  return target;
}

size_t Obstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vutura.obstacles.Obstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vutura.obstacles.Obstacle.Position position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .vutura.obstacles.Obstacle.Fence fence = 4;
  if (this->has_fence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fence_);
  }

  // uint32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // .vutura.obstacles.Obstacle.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vutura.obstacles.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacle* source =
      ::google::protobuf::DynamicCastToGenerated<Obstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vutura.obstacles.Obstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vutura.obstacles.Obstacle)
    MergeFrom(*source);
  }
}

void Obstacle::MergeFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vutura.obstacles.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::vutura::obstacles::Obstacle_Position::MergeFrom(from.position());
  }
  if (from.has_fence()) {
    mutable_fence()->::vutura::obstacles::Obstacle_Fence::MergeFrom(from.fence());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Obstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vutura.obstacles.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle::CopyFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vutura.obstacles.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {
  return true;
}

void Obstacle::Swap(Obstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Obstacle::InternalSwap(Obstacle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(fence_, other->fence_);
  swap(id_, other->id_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata Obstacle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lora_2dobstacles_2eproto);
  return ::file_level_metadata_lora_2dobstacles_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CollisionWarning::InitAsDefaultInstance() {
}
class CollisionWarning::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollisionWarning::kTimestampFieldNumber;
const int CollisionWarning::kIDFieldNumber;
const int CollisionWarning::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollisionWarning::CollisionWarning()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vutura.obstacles.CollisionWarning)
}
CollisionWarning::CollisionWarning(const CollisionWarning& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:vutura.obstacles.CollisionWarning)
}

void CollisionWarning::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(distance_));
}

CollisionWarning::~CollisionWarning() {
  // @@protoc_insertion_point(destructor:vutura.obstacles.CollisionWarning)
  SharedDtor();
}

void CollisionWarning::SharedDtor() {
}

void CollisionWarning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollisionWarning& CollisionWarning::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CollisionWarning_lora_2dobstacles_2eproto.base);
  return *internal_default_instance();
}


void CollisionWarning::Clear() {
// @@protoc_insertion_point(message_clear_start:vutura.obstacles.CollisionWarning)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(distance_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CollisionWarning::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CollisionWarning*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 ID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float distance = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_distance(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CollisionWarning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vutura.obstacles.CollisionWarning)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float distance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vutura.obstacles.CollisionWarning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vutura.obstacles.CollisionWarning)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CollisionWarning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vutura.obstacles.CollisionWarning)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // uint32 ID = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // float distance = 3;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vutura.obstacles.CollisionWarning)
}

::google::protobuf::uint8* CollisionWarning::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vutura.obstacles.CollisionWarning)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // uint32 ID = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // float distance = 3;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vutura.obstacles.CollisionWarning)
  return target;
}

size_t CollisionWarning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vutura.obstacles.CollisionWarning)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint32 ID = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // float distance = 3;
  if (this->distance() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollisionWarning::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vutura.obstacles.CollisionWarning)
  GOOGLE_DCHECK_NE(&from, this);
  const CollisionWarning* source =
      ::google::protobuf::DynamicCastToGenerated<CollisionWarning>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vutura.obstacles.CollisionWarning)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vutura.obstacles.CollisionWarning)
    MergeFrom(*source);
  }
}

void CollisionWarning::MergeFrom(const CollisionWarning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vutura.obstacles.CollisionWarning)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
}

void CollisionWarning::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vutura.obstacles.CollisionWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollisionWarning::CopyFrom(const CollisionWarning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vutura.obstacles.CollisionWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionWarning::IsInitialized() const {
  return true;
}

void CollisionWarning::Swap(CollisionWarning* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CollisionWarning::InternalSwap(CollisionWarning* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
  swap(id_, other->id_);
  swap(distance_, other->distance_);
}

::google::protobuf::Metadata CollisionWarning::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lora_2dobstacles_2eproto);
  return ::file_level_metadata_lora_2dobstacles_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CollisionWarnings::InitAsDefaultInstance() {
}
class CollisionWarnings::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollisionWarnings::kWarningListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollisionWarnings::CollisionWarnings()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vutura.obstacles.CollisionWarnings)
}
CollisionWarnings::CollisionWarnings(const CollisionWarnings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      warninglist_(from.warninglist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vutura.obstacles.CollisionWarnings)
}

void CollisionWarnings::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CollisionWarnings_lora_2dobstacles_2eproto.base);
}

CollisionWarnings::~CollisionWarnings() {
  // @@protoc_insertion_point(destructor:vutura.obstacles.CollisionWarnings)
  SharedDtor();
}

void CollisionWarnings::SharedDtor() {
}

void CollisionWarnings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollisionWarnings& CollisionWarnings::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CollisionWarnings_lora_2dobstacles_2eproto.base);
  return *internal_default_instance();
}


void CollisionWarnings::Clear() {
// @@protoc_insertion_point(message_clear_start:vutura.obstacles.CollisionWarnings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  warninglist_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CollisionWarnings::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CollisionWarnings*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vutura.obstacles.CollisionWarning warningList = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vutura::obstacles::CollisionWarning::_InternalParse;
          object = msg->add_warninglist();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CollisionWarnings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vutura.obstacles.CollisionWarnings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vutura.obstacles.CollisionWarning warningList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_warninglist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vutura.obstacles.CollisionWarnings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vutura.obstacles.CollisionWarnings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CollisionWarnings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vutura.obstacles.CollisionWarnings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vutura.obstacles.CollisionWarning warningList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->warninglist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->warninglist(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vutura.obstacles.CollisionWarnings)
}

::google::protobuf::uint8* CollisionWarnings::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vutura.obstacles.CollisionWarnings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vutura.obstacles.CollisionWarning warningList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->warninglist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->warninglist(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vutura.obstacles.CollisionWarnings)
  return target;
}

size_t CollisionWarnings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vutura.obstacles.CollisionWarnings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vutura.obstacles.CollisionWarning warningList = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->warninglist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->warninglist(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollisionWarnings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vutura.obstacles.CollisionWarnings)
  GOOGLE_DCHECK_NE(&from, this);
  const CollisionWarnings* source =
      ::google::protobuf::DynamicCastToGenerated<CollisionWarnings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vutura.obstacles.CollisionWarnings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vutura.obstacles.CollisionWarnings)
    MergeFrom(*source);
  }
}

void CollisionWarnings::MergeFrom(const CollisionWarnings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vutura.obstacles.CollisionWarnings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  warninglist_.MergeFrom(from.warninglist_);
}

void CollisionWarnings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vutura.obstacles.CollisionWarnings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollisionWarnings::CopyFrom(const CollisionWarnings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vutura.obstacles.CollisionWarnings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionWarnings::IsInitialized() const {
  return true;
}

void CollisionWarnings::Swap(CollisionWarnings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CollisionWarnings::InternalSwap(CollisionWarnings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&warninglist_)->InternalSwap(CastToBase(&other->warninglist_));
}

::google::protobuf::Metadata CollisionWarnings::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lora_2dobstacles_2eproto);
  return ::file_level_metadata_lora_2dobstacles_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace obstacles
}  // namespace vutura
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::vutura::obstacles::Empty* Arena::CreateMaybeMessage< ::vutura::obstacles::Empty >(Arena* arena) {
  return Arena::CreateInternal< ::vutura::obstacles::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::vutura::obstacles::TagsResponse* Arena::CreateMaybeMessage< ::vutura::obstacles::TagsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vutura::obstacles::TagsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vutura::obstacles::Obstacle_Position* Arena::CreateMaybeMessage< ::vutura::obstacles::Obstacle_Position >(Arena* arena) {
  return Arena::CreateInternal< ::vutura::obstacles::Obstacle_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::vutura::obstacles::Obstacle_Fence* Arena::CreateMaybeMessage< ::vutura::obstacles::Obstacle_Fence >(Arena* arena) {
  return Arena::CreateInternal< ::vutura::obstacles::Obstacle_Fence >(arena);
}
template<> PROTOBUF_NOINLINE ::vutura::obstacles::Obstacle* Arena::CreateMaybeMessage< ::vutura::obstacles::Obstacle >(Arena* arena) {
  return Arena::CreateInternal< ::vutura::obstacles::Obstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::vutura::obstacles::CollisionWarning* Arena::CreateMaybeMessage< ::vutura::obstacles::CollisionWarning >(Arena* arena) {
  return Arena::CreateInternal< ::vutura::obstacles::CollisionWarning >(arena);
}
template<> PROTOBUF_NOINLINE ::vutura::obstacles::CollisionWarnings* Arena::CreateMaybeMessage< ::vutura::obstacles::CollisionWarnings >(Arena* arena) {
  return Arena::CreateInternal< ::vutura::obstacles::CollisionWarnings >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
