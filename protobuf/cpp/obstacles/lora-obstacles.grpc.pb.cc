// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: obstacles/lora-obstacles.proto

#include "obstacles/lora-obstacles.pb.h"
#include "obstacles/lora-obstacles.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace vutura {
namespace obstacles {

static const char* TagsService_method_names[] = {
  "/vutura.obstacles.TagsService/GetTags",
  "/vutura.obstacles.TagsService/SetTag",
  "/vutura.obstacles.TagsService/GetWarnings",
  "/vutura.obstacles.TagsService/SetWarning",
};

std::unique_ptr< TagsService::Stub> TagsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TagsService::Stub> stub(new TagsService::Stub(channel));
  return stub;
}

TagsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetTags_(TagsService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTag_(TagsService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWarnings_(TagsService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetWarning_(TagsService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TagsService::Stub::GetTags(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::vutura::obstacles::TagsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTags_, context, request, response);
}

void TagsService::Stub::experimental_async::GetTags(::grpc::ClientContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::TagsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTags_, context, request, response, std::move(f));
}

void TagsService::Stub::experimental_async::GetTags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vutura::obstacles::TagsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTags_, context, request, response, std::move(f));
}

void TagsService::Stub::experimental_async::GetTags(::grpc::ClientContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::TagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTags_, context, request, response, reactor);
}

void TagsService::Stub::experimental_async::GetTags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vutura::obstacles::TagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTags_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vutura::obstacles::TagsResponse>* TagsService::Stub::AsyncGetTagsRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vutura::obstacles::TagsResponse>::Create(channel_.get(), cq, rpcmethod_GetTags_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vutura::obstacles::TagsResponse>* TagsService::Stub::PrepareAsyncGetTagsRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vutura::obstacles::TagsResponse>::Create(channel_.get(), cq, rpcmethod_GetTags_, context, request, false);
}

::grpc::Status TagsService::Stub::SetTag(::grpc::ClientContext* context, const ::vutura::obstacles::Obstacle& request, ::vutura::obstacles::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetTag_, context, request, response);
}

void TagsService::Stub::experimental_async::SetTag(::grpc::ClientContext* context, const ::vutura::obstacles::Obstacle* request, ::vutura::obstacles::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTag_, context, request, response, std::move(f));
}

void TagsService::Stub::experimental_async::SetTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vutura::obstacles::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTag_, context, request, response, std::move(f));
}

void TagsService::Stub::experimental_async::SetTag(::grpc::ClientContext* context, const ::vutura::obstacles::Obstacle* request, ::vutura::obstacles::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTag_, context, request, response, reactor);
}

void TagsService::Stub::experimental_async::SetTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vutura::obstacles::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTag_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vutura::obstacles::Empty>* TagsService::Stub::AsyncSetTagRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Obstacle& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vutura::obstacles::Empty>::Create(channel_.get(), cq, rpcmethod_SetTag_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vutura::obstacles::Empty>* TagsService::Stub::PrepareAsyncSetTagRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Obstacle& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vutura::obstacles::Empty>::Create(channel_.get(), cq, rpcmethod_SetTag_, context, request, false);
}

::grpc::Status TagsService::Stub::GetWarnings(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::vutura::obstacles::CollisionWarnings* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetWarnings_, context, request, response);
}

void TagsService::Stub::experimental_async::GetWarnings(::grpc::ClientContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::CollisionWarnings* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWarnings_, context, request, response, std::move(f));
}

void TagsService::Stub::experimental_async::GetWarnings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vutura::obstacles::CollisionWarnings* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWarnings_, context, request, response, std::move(f));
}

void TagsService::Stub::experimental_async::GetWarnings(::grpc::ClientContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::CollisionWarnings* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWarnings_, context, request, response, reactor);
}

void TagsService::Stub::experimental_async::GetWarnings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vutura::obstacles::CollisionWarnings* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWarnings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vutura::obstacles::CollisionWarnings>* TagsService::Stub::AsyncGetWarningsRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vutura::obstacles::CollisionWarnings>::Create(channel_.get(), cq, rpcmethod_GetWarnings_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vutura::obstacles::CollisionWarnings>* TagsService::Stub::PrepareAsyncGetWarningsRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vutura::obstacles::CollisionWarnings>::Create(channel_.get(), cq, rpcmethod_GetWarnings_, context, request, false);
}

::grpc::Status TagsService::Stub::SetWarning(::grpc::ClientContext* context, const ::vutura::obstacles::CollisionWarning& request, ::vutura::obstacles::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetWarning_, context, request, response);
}

void TagsService::Stub::experimental_async::SetWarning(::grpc::ClientContext* context, const ::vutura::obstacles::CollisionWarning* request, ::vutura::obstacles::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetWarning_, context, request, response, std::move(f));
}

void TagsService::Stub::experimental_async::SetWarning(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vutura::obstacles::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetWarning_, context, request, response, std::move(f));
}

void TagsService::Stub::experimental_async::SetWarning(::grpc::ClientContext* context, const ::vutura::obstacles::CollisionWarning* request, ::vutura::obstacles::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetWarning_, context, request, response, reactor);
}

void TagsService::Stub::experimental_async::SetWarning(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vutura::obstacles::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetWarning_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vutura::obstacles::Empty>* TagsService::Stub::AsyncSetWarningRaw(::grpc::ClientContext* context, const ::vutura::obstacles::CollisionWarning& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vutura::obstacles::Empty>::Create(channel_.get(), cq, rpcmethod_SetWarning_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::vutura::obstacles::Empty>* TagsService::Stub::PrepareAsyncSetWarningRaw(::grpc::ClientContext* context, const ::vutura::obstacles::CollisionWarning& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::vutura::obstacles::Empty>::Create(channel_.get(), cq, rpcmethod_SetWarning_, context, request, false);
}

TagsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TagsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TagsService::Service, ::vutura::obstacles::Empty, ::vutura::obstacles::TagsResponse>(
          std::mem_fn(&TagsService::Service::GetTags), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TagsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TagsService::Service, ::vutura::obstacles::Obstacle, ::vutura::obstacles::Empty>(
          std::mem_fn(&TagsService::Service::SetTag), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TagsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TagsService::Service, ::vutura::obstacles::Empty, ::vutura::obstacles::CollisionWarnings>(
          std::mem_fn(&TagsService::Service::GetWarnings), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TagsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TagsService::Service, ::vutura::obstacles::CollisionWarning, ::vutura::obstacles::Empty>(
          std::mem_fn(&TagsService::Service::SetWarning), this)));
}

TagsService::Service::~Service() {
}

::grpc::Status TagsService::Service::GetTags(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::TagsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TagsService::Service::SetTag(::grpc::ServerContext* context, const ::vutura::obstacles::Obstacle* request, ::vutura::obstacles::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TagsService::Service::GetWarnings(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::CollisionWarnings* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TagsService::Service::SetWarning(::grpc::ServerContext* context, const ::vutura::obstacles::CollisionWarning* request, ::vutura::obstacles::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vutura
}  // namespace obstacles

