// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lora-obstacles.proto
#ifndef GRPC_lora_2dobstacles_2eproto__INCLUDED
#define GRPC_lora_2dobstacles_2eproto__INCLUDED

#include "lora-obstacles.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace vutura {
namespace obstacles {

class TagsService final {
 public:
  static constexpr char const* service_full_name() {
    return "vutura.obstacles.TagsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetTags(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::vutura::obstacles::TagsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::TagsResponse>> AsyncGetTags(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::TagsResponse>>(AsyncGetTagsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::TagsResponse>> PrepareAsyncGetTags(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::TagsResponse>>(PrepareAsyncGetTagsRaw(context, request, cq));
    }
    virtual ::grpc::Status SetTag(::grpc::ClientContext* context, const ::vutura::obstacles::Obstacle& request, ::vutura::obstacles::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::Empty>> AsyncSetTag(::grpc::ClientContext* context, const ::vutura::obstacles::Obstacle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::Empty>>(AsyncSetTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::Empty>> PrepareAsyncSetTag(::grpc::ClientContext* context, const ::vutura::obstacles::Obstacle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::Empty>>(PrepareAsyncSetTagRaw(context, request, cq));
    }
    virtual ::grpc::Status GetWarnings(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::vutura::obstacles::CollisionWarnings* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::CollisionWarnings>> AsyncGetWarnings(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::CollisionWarnings>>(AsyncGetWarningsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::CollisionWarnings>> PrepareAsyncGetWarnings(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::CollisionWarnings>>(PrepareAsyncGetWarningsRaw(context, request, cq));
    }
    virtual ::grpc::Status SetWarning(::grpc::ClientContext* context, const ::vutura::obstacles::CollisionWarning& request, ::vutura::obstacles::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::Empty>> AsyncSetWarning(::grpc::ClientContext* context, const ::vutura::obstacles::CollisionWarning& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::Empty>>(AsyncSetWarningRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::Empty>> PrepareAsyncSetWarning(::grpc::ClientContext* context, const ::vutura::obstacles::CollisionWarning& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::Empty>>(PrepareAsyncSetWarningRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetTags(::grpc::ClientContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::TagsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vutura::obstacles::TagsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTag(::grpc::ClientContext* context, const ::vutura::obstacles::Obstacle* request, ::vutura::obstacles::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vutura::obstacles::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWarnings(::grpc::ClientContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::CollisionWarnings* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWarnings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vutura::obstacles::CollisionWarnings* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetWarning(::grpc::ClientContext* context, const ::vutura::obstacles::CollisionWarning* request, ::vutura::obstacles::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetWarning(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vutura::obstacles::Empty* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::TagsResponse>* AsyncGetTagsRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::TagsResponse>* PrepareAsyncGetTagsRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::Empty>* AsyncSetTagRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Obstacle& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::Empty>* PrepareAsyncSetTagRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Obstacle& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::CollisionWarnings>* AsyncGetWarningsRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::CollisionWarnings>* PrepareAsyncGetWarningsRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::Empty>* AsyncSetWarningRaw(::grpc::ClientContext* context, const ::vutura::obstacles::CollisionWarning& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vutura::obstacles::Empty>* PrepareAsyncSetWarningRaw(::grpc::ClientContext* context, const ::vutura::obstacles::CollisionWarning& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetTags(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::vutura::obstacles::TagsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::TagsResponse>> AsyncGetTags(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::TagsResponse>>(AsyncGetTagsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::TagsResponse>> PrepareAsyncGetTags(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::TagsResponse>>(PrepareAsyncGetTagsRaw(context, request, cq));
    }
    ::grpc::Status SetTag(::grpc::ClientContext* context, const ::vutura::obstacles::Obstacle& request, ::vutura::obstacles::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::Empty>> AsyncSetTag(::grpc::ClientContext* context, const ::vutura::obstacles::Obstacle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::Empty>>(AsyncSetTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::Empty>> PrepareAsyncSetTag(::grpc::ClientContext* context, const ::vutura::obstacles::Obstacle& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::Empty>>(PrepareAsyncSetTagRaw(context, request, cq));
    }
    ::grpc::Status GetWarnings(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::vutura::obstacles::CollisionWarnings* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::CollisionWarnings>> AsyncGetWarnings(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::CollisionWarnings>>(AsyncGetWarningsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::CollisionWarnings>> PrepareAsyncGetWarnings(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::CollisionWarnings>>(PrepareAsyncGetWarningsRaw(context, request, cq));
    }
    ::grpc::Status SetWarning(::grpc::ClientContext* context, const ::vutura::obstacles::CollisionWarning& request, ::vutura::obstacles::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::Empty>> AsyncSetWarning(::grpc::ClientContext* context, const ::vutura::obstacles::CollisionWarning& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::Empty>>(AsyncSetWarningRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::Empty>> PrepareAsyncSetWarning(::grpc::ClientContext* context, const ::vutura::obstacles::CollisionWarning& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::Empty>>(PrepareAsyncSetWarningRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetTags(::grpc::ClientContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::TagsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vutura::obstacles::TagsResponse* response, std::function<void(::grpc::Status)>) override;
      void SetTag(::grpc::ClientContext* context, const ::vutura::obstacles::Obstacle* request, ::vutura::obstacles::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vutura::obstacles::Empty* response, std::function<void(::grpc::Status)>) override;
      void GetWarnings(::grpc::ClientContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::CollisionWarnings* response, std::function<void(::grpc::Status)>) override;
      void GetWarnings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vutura::obstacles::CollisionWarnings* response, std::function<void(::grpc::Status)>) override;
      void SetWarning(::grpc::ClientContext* context, const ::vutura::obstacles::CollisionWarning* request, ::vutura::obstacles::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetWarning(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vutura::obstacles::Empty* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::TagsResponse>* AsyncGetTagsRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::TagsResponse>* PrepareAsyncGetTagsRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::Empty>* AsyncSetTagRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Obstacle& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::Empty>* PrepareAsyncSetTagRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Obstacle& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::CollisionWarnings>* AsyncGetWarningsRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::CollisionWarnings>* PrepareAsyncGetWarningsRaw(::grpc::ClientContext* context, const ::vutura::obstacles::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::Empty>* AsyncSetWarningRaw(::grpc::ClientContext* context, const ::vutura::obstacles::CollisionWarning& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vutura::obstacles::Empty>* PrepareAsyncSetWarningRaw(::grpc::ClientContext* context, const ::vutura::obstacles::CollisionWarning& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetTags_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTag_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWarnings_;
    const ::grpc::internal::RpcMethod rpcmethod_SetWarning_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetTags(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::TagsResponse* response);
    virtual ::grpc::Status SetTag(::grpc::ServerContext* context, const ::vutura::obstacles::Obstacle* request, ::vutura::obstacles::Empty* response);
    virtual ::grpc::Status GetWarnings(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::CollisionWarnings* response);
    virtual ::grpc::Status SetWarning(::grpc::ServerContext* context, const ::vutura::obstacles::CollisionWarning* request, ::vutura::obstacles::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTags() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTags(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::TagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTags(::grpc::ServerContext* context, ::vutura::obstacles::Empty* request, ::grpc::ServerAsyncResponseWriter< ::vutura::obstacles::TagsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetTag() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTag(::grpc::ServerContext* context, const ::vutura::obstacles::Obstacle* request, ::vutura::obstacles::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTag(::grpc::ServerContext* context, ::vutura::obstacles::Obstacle* request, ::grpc::ServerAsyncResponseWriter< ::vutura::obstacles::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWarnings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetWarnings() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetWarnings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWarnings(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::CollisionWarnings* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWarnings(::grpc::ServerContext* context, ::vutura::obstacles::Empty* request, ::grpc::ServerAsyncResponseWriter< ::vutura::obstacles::CollisionWarnings>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetWarning : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetWarning() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetWarning() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWarning(::grpc::ServerContext* context, const ::vutura::obstacles::CollisionWarning* request, ::vutura::obstacles::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetWarning(::grpc::ServerContext* context, ::vutura::obstacles::CollisionWarning* request, ::grpc::ServerAsyncResponseWriter< ::vutura::obstacles::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetTags<WithAsyncMethod_SetTag<WithAsyncMethod_GetWarnings<WithAsyncMethod_SetWarning<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetTags() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::vutura::obstacles::Empty, ::vutura::obstacles::TagsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::vutura::obstacles::Empty* request,
                 ::vutura::obstacles::TagsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetTags(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTags(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::TagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTags(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::TagsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetTag() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::vutura::obstacles::Obstacle, ::vutura::obstacles::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::vutura::obstacles::Obstacle* request,
                 ::vutura::obstacles::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetTag(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SetTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTag(::grpc::ServerContext* context, const ::vutura::obstacles::Obstacle* request, ::vutura::obstacles::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetTag(::grpc::ServerContext* context, const ::vutura::obstacles::Obstacle* request, ::vutura::obstacles::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetWarnings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetWarnings() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::vutura::obstacles::Empty, ::vutura::obstacles::CollisionWarnings>(
          [this](::grpc::ServerContext* context,
                 const ::vutura::obstacles::Empty* request,
                 ::vutura::obstacles::CollisionWarnings* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetWarnings(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetWarnings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWarnings(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::CollisionWarnings* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetWarnings(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::CollisionWarnings* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetWarning : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetWarning() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::vutura::obstacles::CollisionWarning, ::vutura::obstacles::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::vutura::obstacles::CollisionWarning* request,
                 ::vutura::obstacles::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetWarning(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SetWarning() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWarning(::grpc::ServerContext* context, const ::vutura::obstacles::CollisionWarning* request, ::vutura::obstacles::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetWarning(::grpc::ServerContext* context, const ::vutura::obstacles::CollisionWarning* request, ::vutura::obstacles::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetTags<ExperimentalWithCallbackMethod_SetTag<ExperimentalWithCallbackMethod_GetWarnings<ExperimentalWithCallbackMethod_SetWarning<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTags() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTags(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::TagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetTag() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTag(::grpc::ServerContext* context, const ::vutura::obstacles::Obstacle* request, ::vutura::obstacles::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWarnings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetWarnings() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetWarnings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWarnings(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::CollisionWarnings* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetWarning : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetWarning() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetWarning() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWarning(::grpc::ServerContext* context, const ::vutura::obstacles::CollisionWarning* request, ::vutura::obstacles::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTags() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTags(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::TagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTags(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetTag() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTag(::grpc::ServerContext* context, const ::vutura::obstacles::Obstacle* request, ::vutura::obstacles::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWarnings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetWarnings() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetWarnings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWarnings(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::CollisionWarnings* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWarnings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetWarning : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetWarning() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SetWarning() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWarning(::grpc::ServerContext* context, const ::vutura::obstacles::CollisionWarning* request, ::vutura::obstacles::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetWarning(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTags() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetTags(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTags(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::TagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTags(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetTag() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetTag(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTag(::grpc::ServerContext* context, const ::vutura::obstacles::Obstacle* request, ::vutura::obstacles::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetTag(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetWarnings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetWarnings() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetWarnings(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetWarnings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWarnings(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::CollisionWarnings* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetWarnings(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetWarning : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetWarning() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetWarning(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetWarning() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWarning(::grpc::ServerContext* context, const ::vutura::obstacles::CollisionWarning* request, ::vutura::obstacles::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetWarning(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTags() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::vutura::obstacles::Empty, ::vutura::obstacles::TagsResponse>(std::bind(&WithStreamedUnaryMethod_GetTags<BaseClass>::StreamedGetTags, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTags(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::TagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTags(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vutura::obstacles::Empty,::vutura::obstacles::TagsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetTag() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::vutura::obstacles::Obstacle, ::vutura::obstacles::Empty>(std::bind(&WithStreamedUnaryMethod_SetTag<BaseClass>::StreamedSetTag, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTag(::grpc::ServerContext* context, const ::vutura::obstacles::Obstacle* request, ::vutura::obstacles::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vutura::obstacles::Obstacle,::vutura::obstacles::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWarnings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetWarnings() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::vutura::obstacles::Empty, ::vutura::obstacles::CollisionWarnings>(std::bind(&WithStreamedUnaryMethod_GetWarnings<BaseClass>::StreamedGetWarnings, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetWarnings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWarnings(::grpc::ServerContext* context, const ::vutura::obstacles::Empty* request, ::vutura::obstacles::CollisionWarnings* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWarnings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vutura::obstacles::Empty,::vutura::obstacles::CollisionWarnings>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetWarning : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetWarning() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::vutura::obstacles::CollisionWarning, ::vutura::obstacles::Empty>(std::bind(&WithStreamedUnaryMethod_SetWarning<BaseClass>::StreamedSetWarning, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetWarning() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetWarning(::grpc::ServerContext* context, const ::vutura::obstacles::CollisionWarning* request, ::vutura::obstacles::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetWarning(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vutura::obstacles::CollisionWarning,::vutura::obstacles::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetTags<WithStreamedUnaryMethod_SetTag<WithStreamedUnaryMethod_GetWarnings<WithStreamedUnaryMethod_SetWarning<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetTags<WithStreamedUnaryMethod_SetTag<WithStreamedUnaryMethod_GetWarnings<WithStreamedUnaryMethod_SetWarning<Service > > > > StreamedService;
};

}  // namespace obstacles
}  // namespace vutura


#endif  // GRPC_lora_2dobstacles_2eproto__INCLUDED
