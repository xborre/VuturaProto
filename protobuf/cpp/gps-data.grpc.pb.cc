// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gps-data.proto

#include "gps-data.pb.h"
#include "gps-data.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace vutura {
namespace gps {

static const char* GPSService_method_names[] = {
  "/vutura.gps.GPSService/GetGPSData",
  "/vutura.gps.GPSService/SetGPSData",
};

std::unique_ptr< GPSService::Stub> GPSService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< GPSService::Stub> stub(new GPSService::Stub(channel));
  return stub;
}

GPSService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetGPSData_(GPSService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetGPSData_(GPSService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GPSService::Stub::GetGPSData(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::vutura::gps::GPSFix* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetGPSData_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::vutura::gps::GPSFix>* GPSService::Stub::AsyncGetGPSDataRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::vutura::gps::GPSFix>(channel_.get(), cq, rpcmethod_GetGPSData_, context, request);
}

::grpc::Status GPSService::Stub::SetGPSData(::grpc::ClientContext* context, const ::vutura::gps::GPSFix& request, ::google::protobuf::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetGPSData_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GPSService::Stub::AsyncSetGPSDataRaw(::grpc::ClientContext* context, const ::vutura::gps::GPSFix& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>(channel_.get(), cq, rpcmethod_SetGPSData_, context, request);
}

GPSService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      GPSService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GPSService::Service, ::google::protobuf::Empty, ::vutura::gps::GPSFix>(
          std::mem_fn(&GPSService::Service::GetGPSData), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      GPSService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GPSService::Service, ::vutura::gps::GPSFix, ::google::protobuf::Empty>(
          std::mem_fn(&GPSService::Service::SetGPSData), this)));
}

GPSService::Service::~Service() {
}

::grpc::Status GPSService::Service::GetGPSData(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::vutura::gps::GPSFix* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GPSService::Service::SetGPSData(::grpc::ServerContext* context, const ::vutura::gps::GPSFix* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vutura
}  // namespace gps

